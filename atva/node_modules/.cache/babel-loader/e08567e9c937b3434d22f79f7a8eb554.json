{"ast":null,"code":"/*\n  Sentence class specific for MaxEnt modeling\n  Copyright (C) 2018 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar util = require('util');\n\nvar Context = require('../Context');\n\nvar Sentence = require('../../../brill_pos_tagger/lib/Sentence');\n\nvar Element = require('./POS_Element');\n\nfunction ME_Sentence() {\n  ME_Sentence.super_.call(this);\n}\n\nutil.inherits(ME_Sentence, Sentence);\n\nME_Sentence.prototype.generateSampleElements = function (sample) {\n  var sentence = this.taggedWords;\n  sentence.forEach(function (token, index) {\n    var x = new Element(token.tag, new Context({\n      wordWindow: {},\n      tagWindow: {}\n    })); // Current word and tag\n\n    x.b.data.wordWindow[\"0\"] = token.token;\n    x.b.data.tagWindow[\"0\"] = sentence[index].tag; // Previous bigram\n\n    if (index > 1) {\n      x.b.data.tagWindow[\"-2\"] = sentence[index - 2].tag;\n      x.b.data.wordWindow[\"-2\"] = sentence[index - 2].token;\n    } // Left bigram\n\n\n    if (index > 0) {\n      x.b.data.tagWindow[\"-1\"] = sentence[index - 1].tag;\n      x.b.data.wordWindow[\"-1\"] = sentence[index - 1].token;\n    } // Right bigram\n\n\n    if (index < sentence.length - 1) {\n      x.b.data.tagWindow[\"1\"] = sentence[index + 1].tag;\n      x.b.data.wordWindow[\"1\"] = sentence[index + 1].token;\n    } // Next bigram\n\n\n    if (index < sentence.length - 2) {\n      x.b.data.tagWindow[\"2\"] = sentence[index + 2].tag;\n      x.b.data.wordWindow[\"2\"] = sentence[index + 2].token;\n    }\n\n    sample.addElement(x);\n  });\n};\n\nmodule.exports = ME_Sentence;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/classifiers/maxent/POS/ME_Sentence.js"],"names":["util","require","Context","Sentence","Element","ME_Sentence","super_","call","inherits","prototype","generateSampleElements","sample","sentence","taggedWords","forEach","token","index","x","tag","wordWindow","tagWindow","b","data","length","addElement","module","exports"],"mappings":"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","sourcesContent":["/*\n  Sentence class specific for MaxEnt modeling\n  Copyright (C) 2018 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar util = require('util');\nvar Context = require('../Context');\nvar Sentence = require('../../../brill_pos_tagger/lib/Sentence');\nvar Element = require('./POS_Element');\n\nfunction ME_Sentence() {\n   ME_Sentence.super_.call(this);\n}\n\nutil.inherits(ME_Sentence, Sentence);\n\nME_Sentence.prototype.generateSampleElements = function(sample) {\n  var sentence = this.taggedWords;\n  sentence.forEach(function(token, index) {\n    var x = new Element(\n      token.tag,\n      new Context({\n        wordWindow: {},\n        tagWindow: {}\n      })\n    );\n\n    // Current word and tag\n    x.b.data.wordWindow[\"0\"] = token.token;\n    x.b.data.tagWindow[\"0\"] = sentence[index].tag;\n\n    // Previous bigram\n    if (index > 1) {\n      x.b.data.tagWindow[\"-2\"] = sentence[index - 2].tag;\n      x.b.data.wordWindow[\"-2\"] = sentence[index - 2].token;\n    }\n\n    // Left bigram\n    if (index > 0) {\n      x.b.data.tagWindow[\"-1\"] = sentence[index - 1].tag;\n      x.b.data.wordWindow[\"-1\"] = sentence[index - 1].token;\n    }\n\n    // Right bigram\n    if (index < sentence.length - 1) {\n      x.b.data.tagWindow[\"1\"] = sentence[index + 1].tag;\n      x.b.data.wordWindow[\"1\"] = sentence[index + 1].token;\n    }\n\n    // Next bigram\n    if (index < sentence.length - 2) {\n      x.b.data.tagWindow[\"2\"] = sentence[index + 2].tag;\n      x.b.data.wordWindow[\"2\"] = sentence[index + 2].token;\n    }\n\n    sample.addElement(x);\n  });\n};\n\nmodule.exports = ME_Sentence;\n"]},"metadata":{},"sourceType":"script"}