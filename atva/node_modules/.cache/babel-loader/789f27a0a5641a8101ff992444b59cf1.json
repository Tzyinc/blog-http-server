{"ast":null,"code":"/*\n    Distribution class for probability distributions\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar Element = require('./Element');\n\nfunction Distribution(alpha, featureSet, sample) {\n  this.alpha = alpha;\n  this.featureSet = featureSet;\n  this.sample = sample;\n} // Returns the distribution as a string that can be stored for later usage\n\n\nDistribution.prototype.toString = function () {};\n\nDistribution.prototype.weight = function (x) {\n  var product = 1;\n  var that = this;\n  this.alpha.forEach(function (alpha_j, j) {\n    product *= Math.pow(alpha_j, that.featureSet.getFeatures()[j].apply(x));\n  });\n  return product;\n};\n\nDistribution.prototype.calculateAPriori = function (x) {\n  if (!this.aPriorisBeforeNormalisation[x.toString()]) {\n    this.aPriorisBeforeNormalisation[x.toString()] = this.weight(x);\n  }\n\n  return this.aPriorisBeforeNormalisation[x.toString()]; // / this.aPrioriNormalisationConstant;\n}; // Memoize a priori probabilities of sample elements\n\n\nDistribution.prototype.prepareWeights = function () {\n  this.aPriorisBeforeNormalisation = {};\n  this.aPrioriNormalisationConstant = 0;\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function (x) {\n    that.aPriorisBeforeNormalisation[x.toString()] = that.weight(x);\n    sum += that.aPriorisBeforeNormalisation[x.toString()];\n  });\n  this.aPrioriNormalisationConstant = sum;\n};\n\nDistribution.prototype.calculateAPosteriori = function (x) {\n  if (!this.aPriorisBeforeNormalisation[x.toString()]) {\n    this.aPriorisBeforeNormalisation[x.toString()] = this.weight(x);\n  }\n\n  if (!this.aPosterioriNormalisationConstants[x.b.toString()]) {\n    this.aPosterioriNormalisationConstants[x.b.toString()] = this.aPosterioriNormalisation(x.b);\n  }\n\n  return this.aPriorisBeforeNormalisation[x] / this.aPosterioriNormalisationConstants[x.b.toString()];\n};\n\nDistribution.prototype.aPosterioriNormalisation = function (b) {\n  var sum = 0;\n  var that = this;\n  this.sample.getClasses().forEach(function (a) {\n    sum += that.weight(new Element(a, b));\n  });\n  return sum;\n}; // Memoize a posteriori probabilities of sample elements\n\n\nDistribution.prototype.prepareAPosterioris = function () {\n  this.aPosterioriNormalisationConstants = {};\n  var contextSeen = {};\n  var that = this;\n  this.sample.elements.forEach(function (sampleElement) {\n    var context = sampleElement.b;\n\n    if (!contextSeen[context]) {\n      contextSeen[context] = true;\n      that.aPosterioriNormalisationConstants[context] = that.aPosterioriNormalisation(context);\n    }\n  });\n}; // Memoize all probabilities of sample elements\n\n\nDistribution.prototype.prepare = function () {\n  this.prepareWeights(); //console.log(\"Weights prepared\");\n\n  this.prepareAPosterioris();\n}; // Relative entropy between observered distribution and derived distribution\n\n\nDistribution.prototype.KullbackLieblerDistance = function () {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function (x) {\n    sum += that.sample.observedProbability(x) * Math.log(that.sample.observedProbability(x) / that.calculateAPriori(x));\n  });\n  return sum;\n};\n\nDistribution.prototype.logLikelihood = function () {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function (x) {\n    sum += that.sample.observedProbability(x) * Math.log(that.calculateAPriori(x));\n  });\n  return sum;\n};\n\nDistribution.prototype.entropy = function () {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function (x) {\n    var p = that.calculateAPriori(x);\n    sum += p * Math.log(p);\n  });\n  return sum;\n};\n\nDistribution.prototype.checkSum = function () {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function (x) {\n    sum += that.calculateAPriori(x);\n  }); //console.log(\"Distribution.checkSum is \" + sum);\n\n  return sum;\n};\n\nmodule.exports = Distribution;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/classifiers/maxent/Distribution.js"],"names":["Element","require","Distribution","alpha","featureSet","sample","prototype","toString","weight","x","product","that","forEach","alpha_j","j","Math","pow","getFeatures","apply","calculateAPriori","aPriorisBeforeNormalisation","prepareWeights","aPrioriNormalisationConstant","sum","elements","calculateAPosteriori","aPosterioriNormalisationConstants","b","aPosterioriNormalisation","getClasses","a","prepareAPosterioris","contextSeen","sampleElement","context","prepare","KullbackLieblerDistance","observedProbability","log","logLikelihood","entropy","p","checkSum","module","exports"],"mappings":"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","sourcesContent":["/*\n    Distribution class for probability distributions\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar Element = require('./Element');\n\nfunction Distribution(alpha, featureSet, sample) {\n  this.alpha = alpha;\n  this.featureSet = featureSet;\n  this.sample = sample;\n}\n\n// Returns the distribution as a string that can be stored for later usage\nDistribution.prototype.toString = function() {\n\n}\n\nDistribution.prototype.weight = function(x) {\n  var product = 1;\n  var that = this;\n\n  this.alpha.forEach(function(alpha_j, j) {\n    product *= Math.pow(alpha_j, that.featureSet.getFeatures()[j].apply(x));\n  });\n  return product;\n};\n\nDistribution.prototype.calculateAPriori = function(x) {\n  if (!this.aPriorisBeforeNormalisation[x.toString()]) {\n    this.aPriorisBeforeNormalisation[x.toString()] = this.weight(x);\n  }\n  return this.aPriorisBeforeNormalisation[x.toString()];// / this.aPrioriNormalisationConstant;\n};\n\n// Memoize a priori probabilities of sample elements\nDistribution.prototype.prepareWeights = function() {\n  this.aPriorisBeforeNormalisation = {};\n  this.aPrioriNormalisationConstant = 0;\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function(x) {\n    that.aPriorisBeforeNormalisation[x.toString()] = that.weight(x);\n    sum += that.aPriorisBeforeNormalisation[x.toString()];\n  });\n  this.aPrioriNormalisationConstant = sum;\n};\n\nDistribution.prototype.calculateAPosteriori = function(x) {\n  if (!this.aPriorisBeforeNormalisation[x.toString()]) {\n    this.aPriorisBeforeNormalisation[x.toString()] = this.weight(x);\n  }\n  if (!this.aPosterioriNormalisationConstants[x.b.toString()]) {\n    this.aPosterioriNormalisationConstants[x.b.toString()] = this.aPosterioriNormalisation(x.b);\n  }\n  return this.aPriorisBeforeNormalisation[x] / this.aPosterioriNormalisationConstants[x.b.toString()];\n};\n\nDistribution.prototype.aPosterioriNormalisation = function(b) {\n  var sum = 0;\n\n  var that = this;\n  this.sample.getClasses().forEach(function(a) {\n    sum += that.weight(new Element(a, b));\n  });\n\n  return(sum);\n};\n\n// Memoize a posteriori probabilities of sample elements\nDistribution.prototype.prepareAPosterioris = function() {\n  this.aPosterioriNormalisationConstants = {};\n\n  var contextSeen = {};\n  var that = this;\n  this.sample.elements.forEach(function(sampleElement) {\n    var context = sampleElement.b;\n    if (!contextSeen[context]) {\n      contextSeen[context] = true;\n      that.aPosterioriNormalisationConstants[context] =\n        that.aPosterioriNormalisation(context);\n    }\n  });\n};\n\n// Memoize all probabilities of sample elements\nDistribution.prototype.prepare = function() {\n  this.prepareWeights();\n  //console.log(\"Weights prepared\");\n  this.prepareAPosterioris();\n};\n\n// Relative entropy between observered distribution and derived distribution\nDistribution.prototype.KullbackLieblerDistance = function() {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function(x) {\n    sum += that.sample.observedProbability(x) * Math.log(that.sample.observedProbability(x) / that.calculateAPriori(x));\n  });\n  return sum;\n};\n\nDistribution.prototype.logLikelihood = function() {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function(x) {\n    sum += that.sample.observedProbability(x) * Math.log(that.calculateAPriori(x));\n  });\n  return sum;\n};\n\nDistribution.prototype.entropy = function() {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function(x) {\n    var p = that.calculateAPriori(x);\n    sum += p * Math.log(p);\n  });\n  return sum;\n};\n\nDistribution.prototype.checkSum = function() {\n  var sum = 0;\n  var that = this;\n  this.sample.elements.forEach(function(x) {\n      sum += that.calculateAPriori(x);\n  });\n  //console.log(\"Distribution.checkSum is \" + sum);\n  return sum;\n}\n\nmodule.exports = Distribution;\n"]},"metadata":{},"sourceType":"script"}