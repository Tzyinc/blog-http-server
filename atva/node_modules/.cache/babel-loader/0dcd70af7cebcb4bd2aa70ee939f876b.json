{"ast":null,"code":"/*\n  Feature set class for administrating a set of unique feature\n  Copyright (C) 2017 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nfunction FeatureSet() {\n  this.features = [];\n  this.map = {};\n} // Returns true if the feature did not exist and was added\n\n\nFeatureSet.prototype.addFeature = function (feature) {\n  if (!this.featureExists(feature)) {\n    this.map[feature.name + \" | \" + feature.parametersKey] = true;\n    this.features.push(feature); //console.log(\"FeatureSet.addFeature: feature added: \" + feature.name + \" - \" + feature.parametersKey);\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nFeatureSet.prototype.featureExists = function (feature) {\n  if (this.map[feature.name + \" | \" + feature.parametersKey]) {\n    //console.log(\"FeatureSet.featureExists: feature already exists: \" +\n    //  feature.name + \" - \" + feature.parameters);\n    return true;\n  } else {\n    return false;\n  }\n}; // Returns an array of features\n// If the available array this.features is up to date it is returned immediately\n\n\nFeatureSet.prototype.getFeatures = function () {\n  return this.features;\n};\n\nFeatureSet.prototype.size = function () {\n  return this.features.length;\n};\n\nFeatureSet.prototype.prettyPrint = function () {\n  var s = \"\";\n  Object.keys(this.map).forEach(function (key) {\n    s += key + \"\\n\";\n  });\n  return s;\n};\n\nmodule.exports = FeatureSet;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/classifiers/maxent/FeatureSet.js"],"names":["FeatureSet","features","map","prototype","addFeature","feature","featureExists","name","parametersKey","push","getFeatures","size","length","prettyPrint","s","Object","keys","forEach","key","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAmBA,SAASA,UAAT,GAAsB;AACpB,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,GAAL,GAAW,EAAX;AACD,C,CAED;;;AACAF,UAAU,CAACG,SAAX,CAAqBC,UAArB,GAAkC,UAASC,OAAT,EAAkB;AAClD,MAAI,CAAC,KAAKC,aAAL,CAAmBD,OAAnB,CAAL,EAAkC;AAChC,SAAKH,GAAL,CAASG,OAAO,CAACE,IAAR,GAAc,KAAd,GAAsBF,OAAO,CAACG,aAAvC,IAAwD,IAAxD;AACA,SAAKP,QAAL,CAAcQ,IAAd,CAAmBJ,OAAnB,EAFgC,CAGhC;;AACA,WAAO,IAAP;AACD,GALD,MAMK;AACH,WAAO,KAAP;AACD;AACF,CAVD;;AAYAL,UAAU,CAACG,SAAX,CAAqBG,aAArB,GAAqC,UAASD,OAAT,EAAkB;AACrD,MAAI,KAAKH,GAAL,CAASG,OAAO,CAACE,IAAR,GAAc,KAAd,GAAsBF,OAAO,CAACG,aAAvC,CAAJ,EAA2D;AACzD;AACA;AACA,WAAO,IAAP;AACD,GAJD,MAKK;AACH,WAAO,KAAP;AACD;AACF,CATD,C,CAWA;AACA;;;AACAR,UAAU,CAACG,SAAX,CAAqBO,WAArB,GAAmC,YAAW;AAC5C,SAAO,KAAKT,QAAZ;AACD,CAFD;;AAIAD,UAAU,CAACG,SAAX,CAAqBQ,IAArB,GAA4B,YAAW;AACrC,SAAO,KAAKV,QAAL,CAAcW,MAArB;AACD,CAFD;;AAIAZ,UAAU,CAACG,SAAX,CAAqBU,WAArB,GAAmC,YAAW;AAC5C,MAAIC,CAAC,GAAG,EAAR;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAY,KAAKd,GAAjB,EAAsBe,OAAtB,CAA8B,UAASC,GAAT,EAAc;AAC1CJ,IAAAA,CAAC,IAAII,GAAG,GAAG,IAAX;AACD,GAFD;AAGA,SAAOJ,CAAP;AACD,CAND;;AAQAK,MAAM,CAACC,OAAP,GAAiBpB,UAAjB","sourcesContent":["/*\n  Feature set class for administrating a set of unique feature\n  Copyright (C) 2017 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nfunction FeatureSet() {\n  this.features = [];\n  this.map = {};\n}\n\n// Returns true if the feature did not exist and was added\nFeatureSet.prototype.addFeature = function(feature) {\n  if (!this.featureExists(feature)) {\n    this.map[feature.name +\" | \" + feature.parametersKey] = true;\n    this.features.push(feature);\n    //console.log(\"FeatureSet.addFeature: feature added: \" + feature.name + \" - \" + feature.parametersKey);\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\nFeatureSet.prototype.featureExists = function(feature) {\n  if (this.map[feature.name +\" | \" + feature.parametersKey]) {\n    //console.log(\"FeatureSet.featureExists: feature already exists: \" +\n    //  feature.name + \" - \" + feature.parameters);\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\n// Returns an array of features\n// If the available array this.features is up to date it is returned immediately\nFeatureSet.prototype.getFeatures = function() {\n  return this.features;\n};\n\nFeatureSet.prototype.size = function() {\n  return this.features.length;\n};\n\nFeatureSet.prototype.prettyPrint = function() {\n  var s = \"\";\n  Object.keys(this.map).forEach(function(key) {\n    s += key + \"\\n\";\n  });\n  return s;\n};\n\nmodule.exports = FeatureSet;\n"]},"metadata":{},"sourceType":"script"}