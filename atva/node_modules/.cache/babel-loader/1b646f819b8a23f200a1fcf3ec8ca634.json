{"ast":null,"code":"/*\nCopyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nvar baseStemmer = require('./base_stemmer_id');\n\nvar stemmer = new baseStemmer(); // Dictionary\n\nvar dictionary = [];\nloadDictionary(); // Rules\n\nvar SuffixRules = require(\"./suffix_rules\");\n\nvar PrefixRules = require(\"./prefix_rules\");\n\nvar suffix_rules = SuffixRules.rules;\nvar prefix_rules = PrefixRules.rules; // Removals\n\nvar removals; // Words\n\nvar original_word;\nvar current_word;\nmodule.exports = stemmer; // perform full stemming algorithm on a single word\n\nstemmer.stem = function (token) {\n  // Cache stemmer not yet implemented\n  // Set to lowercase\n  token = token.toLowerCase(); //Initiate everything\n\n  removals = [];\n\n  if (isPlural(token)) {\n    return stemPluralWord(token);\n  } else {\n    return stemSingularWord(token);\n  }\n}; // Stem for plural word\n\n\nfunction stemPluralWord(plural_word) {\n  var matches = plural_word.match(/^(.*)-(.*)$/);\n\n  if (!matches) {\n    return plural_word;\n  }\n\n  words = [matches[1], matches[2]]; //malaikat-malaikat-nya -> malaikat malaikat-nya\n\n  suffix = words[1];\n  suffixes = [\"ku\", \"mu\", \"nya\", \"lah\", \"kah\", \"tah\", \"pun\"];\n  matches = words[0].match(/^(.*)-(.*)$/);\n\n  if (suffixes.indexOf(suffix) != -1 && matches) {\n    words[0] = matches[1];\n    words[1] = matches[2] + '-' + suffix;\n  } //berbalas-balasan -> balas\n\n\n  rootWord1 = stemSingularWord(words[0]);\n  rootWord2 = stemSingularWord(words[1]); //meniru-nirukan -> tiru\n\n  if (!find(words[1]) && rootWord2 == words[1]) {\n    rootWord2 = stemSingularWord(\"me\" + words[1]);\n  }\n\n  if (rootWord1 == rootWord2) {\n    return rootWord1;\n  } else {\n    return plural_word;\n  }\n} // Stem for singular word\n\n\nfunction stemSingularWord(word) {\n  original_word = word; // Save the original word for reverting later\n\n  current_word = word; // Step 1\n\n  if (current_word.length > 3) {\n    // Step 2-5\n    stemmingProcess();\n  } // Step 6\n\n\n  if (find(current_word)) {\n    return current_word;\n  } else {\n    return original_word;\n  }\n} // Return true if word is in plural form ex: gelas-gelas, else false\n\n\nfunction isPlural(token) {\n  var matches = token.match(/^(.*)-(ku|mu|nya|lah|kah|tah|pun)$/);\n\n  if (matches) {\n    return matches[1].search('-') != -1;\n  }\n\n  return token.search('-') != -1;\n} // Find certain word in dictionary\n\n\nfunction find(word) {\n  return dictionary.indexOf(word) != -1;\n}\n\nfunction loadDictionary() {\n  var fs = require('fs'); //var dirname = __dirname + \"/../../../../data/kata-dasar.txt\";\n  //var fin = fs.readFileSync(dirname).toString().split(\"\\n\");\n\n\n  var fin = require('./data/kata-dasar.json');\n\n  fin.forEach(function (word) {\n    if (word) {\n      dictionary.push(word.trim());\n    }\n  });\n} // Stemming from step 2-5\n\n\nfunction stemmingProcess() {\n  if (find(current_word)) return; // Confix Stripping\n  // Try to remove prefixes first before suffixes if the specification is met\n\n  if (precedenceAdjustmentSpecification(original_word)) {\n    // Step 4, 5\n    removePrefixes();\n    if (find(current_word)) return; // Step 2, 3\n\n    removeSuffixes();\n\n    if (find(current_word)) {\n      return;\n    } else {\n      // if the trial is failed, restore the original word\n      // and continue to normal rule precedence (suffix first, prefix afterwards)\n      current_word = original_word;\n      removals = [];\n    }\n  } // Step 2, 3\n\n\n  removeSuffixes();\n  if (find(current_word)) return; // Step 4, 5\n\n  removePrefixes();\n  if (find(current_word)) return; //ECS Loop Restore Prefixes\n\n  loopRestorePrefixes();\n} // Remove Suffixes\n\n\nfunction removeSuffixes() {\n  for (var i in suffix_rules) {\n    resultObj = suffix_rules[i](current_word); // Add result to variable\n\n    if (resultObj.removal != undefined) {\n      removals.push(resultObj.removal);\n    }\n\n    current_word = resultObj.current_word;\n    if (find(current_word)) return current_word;\n  }\n} // Remove Prefixes\n\n\nfunction removePrefixes() {\n  for (var i = 0; i < 3; i++) {\n    var removalCount = removals.length;\n    checkPrefixRules();\n    if (find(current_word)) return current_word;\n  }\n}\n\nfunction checkPrefixRules() {\n  var removalCount = removals.length;\n  var j = 0;\n\n  for (j = 0; j < prefix_rules.length; j++) {\n    resultObj = prefix_rules[j](current_word); // Add result to variable\n\n    if (resultObj.removal != undefined) {\n      removals.push(resultObj.removal);\n    }\n\n    current_word = resultObj.current_word;\n    if (find(current_word)) return current_word;\n\n    if (removals.length > removalCount) {\n      return;\n    }\n  }\n} // Loop Restore Prefixes\n\n\nfunction loopRestorePrefixes() {\n  restorePrefix();\n  var reversed_removals = removals.reverse();\n  var temp_current_word = current_word;\n\n  for (var i in reversed_removals) {\n    current_removal = reversed_removals[i];\n\n    if (!isSuffixRemovals(current_removal)) {\n      continue;\n    }\n\n    if (current_removal.getRemovedPart() == \"kan\") {\n      current_word = current_removal.getResult() + \"k\"; // Step 4, 5\n\n      removePrefixes();\n      if (find(current_word)) return;\n      current_word = current_removal.getResult() + \"kan\";\n    } else {\n      current_word = current_removal.getOriginalWord();\n    } // Step 4, 5\n\n\n    removePrefixes();\n    if (find(current_word)) return;\n    current_word = temp_current_word;\n  }\n}\n\nfunction isSuffixRemovals(removal) {\n  var type = removal.getAffixType();\n\n  if (type == \"DS\" || type == \"PP\" || type == \"P\") {\n    return true;\n  }\n\n  return false;\n}\n\nfunction restorePrefix() {\n  for (var i = 0; i < removals.length; i++) {\n    current_word = removals[i].getOriginalWord();\n    break;\n  }\n\n  for (var i = 0; i < removals.length; i++) {\n    if (removals[i].getAffixType() == \"DP\") {\n      removals.splice(i, 1);\n      i--;\n    }\n  }\n} // Check if word require precedence adjustment or not\n// Adjustment means remove prefix then suffix instead of remove suffix then prefix\n\n\nfunction precedenceAdjustmentSpecification(word) {\n  var regex_rules = [/^be(.*)lah$/, /^be(.*)an$/, /^me(.*)i$/, /^di(.*)i$/, /^pe(.*)i$/, /^ter(.*)i$/];\n\n  for (var i in regex_rules) {\n    if (word.match(regex_rules[i])) {\n      return true;\n    }\n  }\n\n  return false;\n} //exports for tests\n\n\nstemmer.isPlural = isPlural;\nstemmer.dictionary = dictionary;\nstemmer.a = suffix_rules[0];","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/stemmers/indonesian/stemmer_id.js"],"names":["baseStemmer","require","stemmer","dictionary","loadDictionary","SuffixRules","PrefixRules","suffix_rules","rules","prefix_rules","removals","original_word","current_word","module","exports","stem","token","toLowerCase","isPlural","stemPluralWord","stemSingularWord","plural_word","matches","match","words","suffix","suffixes","indexOf","rootWord1","rootWord2","find","word","length","stemmingProcess","search","fs","fin","forEach","push","trim","precedenceAdjustmentSpecification","removePrefixes","removeSuffixes","loopRestorePrefixes","i","resultObj","removal","undefined","removalCount","checkPrefixRules","j","restorePrefix","reversed_removals","reverse","temp_current_word","current_removal","isSuffixRemovals","getRemovedPart","getResult","getOriginalWord","type","getAffixType","splice","regex_rules","a"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAIA,WAAW,GAAGC,OAAO,CAAC,mBAAD,CAAzB;;AACA,IAAIC,OAAO,GAAG,IAAIF,WAAJ,EAAd,C,CAEA;;AACA,IAAIG,UAAU,GAAG,EAAjB;AACAC,cAAc,G,CAEd;;AACA,IAAIC,WAAW,GAAGJ,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIM,YAAY,GAAGF,WAAW,CAACG,KAA/B;AACA,IAAIC,YAAY,GAAGH,WAAW,CAACE,KAA/B,C,CAEA;;AACA,IAAIE,QAAJ,C,CAEA;;AACA,IAAIC,aAAJ;AACA,IAAIC,YAAJ;AAEAC,MAAM,CAACC,OAAP,GAAiBZ,OAAjB,C,CAEA;;AACAA,OAAO,CAACa,IAAR,GAAe,UAASC,KAAT,EAAgB;AAC3B;AACA;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,WAAN,EAAR,CAH2B,CAK3B;;AACAP,EAAAA,QAAQ,GAAG,EAAX;;AAEA,MAAGQ,QAAQ,CAACF,KAAD,CAAX,EAAmB;AACf,WAAOG,cAAc,CAACH,KAAD,CAArB;AACH,GAFD,MAGI;AACA,WAAOI,gBAAgB,CAACJ,KAAD,CAAvB;AACH;AACJ,CAdD,C,CAgBA;;;AACA,SAASG,cAAT,CAAwBE,WAAxB,EAAoC;AAChC,MAAIC,OAAO,GAAGD,WAAW,CAACE,KAAZ,CAAkB,aAAlB,CAAd;;AACA,MAAG,CAACD,OAAJ,EAAY;AACR,WAAOD,WAAP;AACH;;AACDG,EAAAA,KAAK,GAAG,CAACF,OAAO,CAAC,CAAD,CAAR,EAAaA,OAAO,CAAC,CAAD,CAApB,CAAR,CALgC,CAOhC;;AACAG,EAAAA,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAd;AACAE,EAAAA,QAAQ,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,KAApB,EAA2B,KAA3B,EAAkC,KAAlC,EAAyC,KAAzC,CAAX;AACAJ,EAAAA,OAAO,GAAGE,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,CAAe,aAAf,CAAV;;AACA,MAAGG,QAAQ,CAACC,OAAT,CAAiBF,MAAjB,KAA4B,CAAC,CAA7B,IAAkCH,OAArC,EAA6C;AACzCE,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWF,OAAO,CAAC,CAAD,CAAlB;AACAE,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWF,OAAO,CAAC,CAAD,CAAP,GAAa,GAAb,GAAmBG,MAA9B;AACH,GAd+B,CAgBhC;;;AACAG,EAAAA,SAAS,GAAGR,gBAAgB,CAACI,KAAK,CAAC,CAAD,CAAN,CAA5B;AACAK,EAAAA,SAAS,GAAGT,gBAAgB,CAACI,KAAK,CAAC,CAAD,CAAN,CAA5B,CAlBgC,CAoBhC;;AACA,MAAG,CAACM,IAAI,CAACN,KAAK,CAAC,CAAD,CAAN,CAAL,IAAmBK,SAAS,IAAEL,KAAK,CAAC,CAAD,CAAtC,EAA0C;AACtCK,IAAAA,SAAS,GAAGT,gBAAgB,CAAC,OAAOI,KAAK,CAAC,CAAD,CAAb,CAA5B;AACH;;AACD,MAAGI,SAAS,IAAEC,SAAd,EAAwB;AACpB,WAAOD,SAAP;AACH,GAFD,MAGI;AACA,WAAOP,WAAP;AACH;AACJ,C,CAED;;;AACA,SAASD,gBAAT,CAA0BW,IAA1B,EAA+B;AAC3BpB,EAAAA,aAAa,GAAGoB,IAAhB,CAD2B,CACL;;AACtBnB,EAAAA,YAAY,GAAGmB,IAAf,CAF2B,CAI3B;;AACA,MAAGnB,YAAY,CAACoB,MAAb,GAAoB,CAAvB,EAAyB;AACrB;AACAC,IAAAA,eAAe;AAClB,GAR0B,CAU3B;;;AACA,MAAGH,IAAI,CAAClB,YAAD,CAAP,EAAsB;AAClB,WAAOA,YAAP;AACH,GAFD,MAGI;AACA,WAAOD,aAAP;AACH;AACJ,C,CAED;;;AACA,SAASO,QAAT,CAAkBF,KAAlB,EAAwB;AACpB,MAAIM,OAAO,GAAGN,KAAK,CAACO,KAAN,CAAY,oCAAZ,CAAd;;AACA,MAAGD,OAAH,EAAW;AACP,WAAOA,OAAO,CAAC,CAAD,CAAP,CAAWY,MAAX,CAAkB,GAAlB,KAA0B,CAAC,CAAlC;AACH;;AACD,SAAOlB,KAAK,CAACkB,MAAN,CAAa,GAAb,KAAqB,CAAC,CAA7B;AACH,C,CAED;;;AACA,SAASJ,IAAT,CAAcC,IAAd,EAAoB;AAChB,SAAQ5B,UAAU,CAACwB,OAAX,CAAmBI,IAAnB,KAA4B,CAAC,CAArC;AACH;;AAED,SAAS3B,cAAT,GAAyB;AACrB,MAAI+B,EAAE,GAAGlC,OAAO,CAAC,IAAD,CAAhB,CADqB,CAErB;AACA;;;AACA,MAAImC,GAAG,GAAGnC,OAAO,CAAC,wBAAD,CAAjB;;AACAmC,EAAAA,GAAG,CAACC,OAAJ,CAAY,UAAUN,IAAV,EAAgB;AACxB,QAAIA,IAAJ,EAAU;AACR5B,MAAAA,UAAU,CAACmC,IAAX,CAAgBP,IAAI,CAACQ,IAAL,EAAhB;AACD;AACJ,GAJD;AAKH,C,CAED;;;AACA,SAASN,eAAT,GAA0B;AACtB,MAAGH,IAAI,CAAClB,YAAD,CAAP,EACI,OAFkB,CAItB;AACA;;AACA,MAAG4B,iCAAiC,CAAC7B,aAAD,CAApC,EAAoD;AAChD;AACA8B,IAAAA,cAAc;AACd,QAAGX,IAAI,CAAClB,YAAD,CAAP,EACI,OAJ4C,CAMhD;;AACA8B,IAAAA,cAAc;;AACd,QAAGZ,IAAI,CAAClB,YAAD,CAAP,EAAsB;AAClB;AACH,KAFD,MAGI;AACA;AACA;AACAA,MAAAA,YAAY,GAAGD,aAAf;AACAD,MAAAA,QAAQ,GAAG,EAAX;AACH;AACJ,GAvBqB,CAyBtB;;;AACAgC,EAAAA,cAAc;AACd,MAAGZ,IAAI,CAAClB,YAAD,CAAP,EACI,OA5BkB,CA8BtB;;AACA6B,EAAAA,cAAc;AACd,MAAGX,IAAI,CAAClB,YAAD,CAAP,EACI,OAjCkB,CAmCtB;;AACA+B,EAAAA,mBAAmB;AACtB,C,CAED;;;AACA,SAASD,cAAT,GAAyB;AACrB,OAAI,IAAIE,CAAR,IAAarC,YAAb,EAA0B;AACtBsC,IAAAA,SAAS,GAAGtC,YAAY,CAACqC,CAAD,CAAZ,CAAgBhC,YAAhB,CAAZ,CADsB,CAGtB;;AACA,QAAGiC,SAAS,CAACC,OAAV,IAAmBC,SAAtB,EAAgC;AAC5BrC,MAAAA,QAAQ,CAAC4B,IAAT,CAAcO,SAAS,CAACC,OAAxB;AACH;;AACDlC,IAAAA,YAAY,GAAGiC,SAAS,CAACjC,YAAzB;AAEA,QAAGkB,IAAI,CAAClB,YAAD,CAAP,EACI,OAAOA,YAAP;AACP;AACJ,C,CAED;;;AACA,SAAS6B,cAAT,GAAyB;AACrB,OAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAsB;AAClB,QAAII,YAAY,GAAGtC,QAAQ,CAACsB,MAA5B;AACAiB,IAAAA,gBAAgB;AAChB,QAAGnB,IAAI,CAAClB,YAAD,CAAP,EACI,OAAOA,YAAP;AACP;AACJ;;AAED,SAASqC,gBAAT,GAA2B;AACvB,MAAID,YAAY,GAAGtC,QAAQ,CAACsB,MAA5B;AACA,MAAIkB,CAAC,GAAG,CAAR;;AACA,OAAIA,CAAC,GAAC,CAAN,EAASA,CAAC,GAACzC,YAAY,CAACuB,MAAxB,EAAgCkB,CAAC,EAAjC,EAAoC;AAChCL,IAAAA,SAAS,GAAGpC,YAAY,CAACyC,CAAD,CAAZ,CAAgBtC,YAAhB,CAAZ,CADgC,CAGhC;;AACA,QAAGiC,SAAS,CAACC,OAAV,IAAmBC,SAAtB,EAAgC;AAC5BrC,MAAAA,QAAQ,CAAC4B,IAAT,CAAcO,SAAS,CAACC,OAAxB;AACH;;AACDlC,IAAAA,YAAY,GAAGiC,SAAS,CAACjC,YAAzB;AAEA,QAAGkB,IAAI,CAAClB,YAAD,CAAP,EACI,OAAOA,YAAP;;AACJ,QAAGF,QAAQ,CAACsB,MAAT,GAAgBgB,YAAnB,EAAgC;AAC5B;AACH;AACJ;AACJ,C,CAED;;;AACA,SAASL,mBAAT,GAA8B;AAC1BQ,EAAAA,aAAa;AAEb,MAAIC,iBAAiB,GAAG1C,QAAQ,CAAC2C,OAAT,EAAxB;AACA,MAAIC,iBAAiB,GAAG1C,YAAxB;;AAEA,OAAI,IAAIgC,CAAR,IAAaQ,iBAAb,EAA+B;AAC3BG,IAAAA,eAAe,GAAGH,iBAAiB,CAACR,CAAD,CAAnC;;AAEA,QAAG,CAACY,gBAAgB,CAACD,eAAD,CAApB,EAAsC;AAClC;AACH;;AAED,QAAGA,eAAe,CAACE,cAAhB,MAAoC,KAAvC,EAA6C;AACzC7C,MAAAA,YAAY,GAAG2C,eAAe,CAACG,SAAhB,KAA8B,GAA7C,CADyC,CAGzC;;AACAjB,MAAAA,cAAc;AACd,UAAGX,IAAI,CAAClB,YAAD,CAAP,EACI;AACJA,MAAAA,YAAY,GAAG2C,eAAe,CAACG,SAAhB,KAA8B,KAA7C;AACH,KARD,MASI;AACA9C,MAAAA,YAAY,GAAG2C,eAAe,CAACI,eAAhB,EAAf;AACH,KAlB0B,CAoB3B;;;AACAlB,IAAAA,cAAc;AACd,QAAGX,IAAI,CAAClB,YAAD,CAAP,EACI;AAEJA,IAAAA,YAAY,GAAG0C,iBAAf;AACH;AACJ;;AAED,SAASE,gBAAT,CAA0BV,OAA1B,EAAkC;AAC9B,MAAIc,IAAI,GAAGd,OAAO,CAACe,YAAR,EAAX;;AACA,MAAGD,IAAI,IAAI,IAAR,IAAgBA,IAAI,IAAI,IAAxB,IAAgCA,IAAI,IAAI,GAA3C,EAA+C;AAC3C,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AACD,SAAST,aAAT,GAAwB;AACpB,OAAI,IAAIP,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAClC,QAAQ,CAACsB,MAAxB,EAAgCY,CAAC,EAAjC,EAAoC;AAChChC,IAAAA,YAAY,GAAGF,QAAQ,CAACkC,CAAD,CAAR,CAAYe,eAAZ,EAAf;AACA;AACH;;AAED,OAAI,IAAIf,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAClC,QAAQ,CAACsB,MAAxB,EAAgCY,CAAC,EAAjC,EAAoC;AAChC,QAAGlC,QAAQ,CAACkC,CAAD,CAAR,CAAYiB,YAAZ,MAA8B,IAAjC,EAAsC;AAClCnD,MAAAA,QAAQ,CAACoD,MAAT,CAAgBlB,CAAhB,EAAmB,CAAnB;AACAA,MAAAA,CAAC;AACJ;AACJ;AACJ,C,CAED;AACA;;;AACA,SAASJ,iCAAT,CAA2CT,IAA3C,EAAgD;AAC5C,MAAIgC,WAAW,GAAG,CACd,aADc,EAEd,YAFc,EAGd,WAHc,EAId,WAJc,EAKd,WALc,EAMd,YANc,CAAlB;;AASA,OAAI,IAAInB,CAAR,IAAamB,WAAb,EAAyB;AACrB,QAAGhC,IAAI,CAACR,KAAL,CAAWwC,WAAW,CAACnB,CAAD,CAAtB,CAAH,EAA8B;AAC1B,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,C,CAED;;;AACA1C,OAAO,CAACgB,QAAR,GAAmBA,QAAnB;AACAhB,OAAO,CAACC,UAAR,GAAqBA,UAArB;AACAD,OAAO,CAAC8D,CAAR,GAAYzD,YAAY,CAAC,CAAD,CAAxB","sourcesContent":["/*\nCopyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar baseStemmer = require('./base_stemmer_id');\nvar stemmer = new baseStemmer();\n\n// Dictionary\nvar dictionary = [];\nloadDictionary();\n\n// Rules\nvar SuffixRules = require(\"./suffix_rules\");\nvar PrefixRules = require(\"./prefix_rules\");\n\nvar suffix_rules = SuffixRules.rules;\nvar prefix_rules = PrefixRules.rules;\n\n// Removals\nvar removals;\n\n// Words\nvar original_word;\nvar current_word;\n\nmodule.exports = stemmer;\n\n// perform full stemming algorithm on a single word\nstemmer.stem = function(token) {\n    // Cache stemmer not yet implemented\n    // Set to lowercase\n    token = token.toLowerCase();\n\n    //Initiate everything\n    removals = [];\n\n    if(isPlural(token)){\n        return stemPluralWord(token);\n    }\n    else{\n        return stemSingularWord(token);\n    }\n};\n\n// Stem for plural word\nfunction stemPluralWord(plural_word){\n    var matches = plural_word.match(/^(.*)-(.*)$/);\n    if(!matches){\n        return plural_word;\n    }\n    words = [matches[1], matches[2]];\n\n    //malaikat-malaikat-nya -> malaikat malaikat-nya\n    suffix = words[1];\n    suffixes = [\"ku\", \"mu\", \"nya\", \"lah\", \"kah\", \"tah\", \"pun\"];\n    matches = words[0].match(/^(.*)-(.*)$/);\n    if(suffixes.indexOf(suffix) != -1 && matches){\n        words[0] = matches[1];\n        words[1] = matches[2] + '-' + suffix;\n    }\n\n    //berbalas-balasan -> balas\n    rootWord1 = stemSingularWord(words[0]);\n    rootWord2 = stemSingularWord(words[1]);\n\n    //meniru-nirukan -> tiru\n    if(!find(words[1]) && rootWord2==words[1]){\n        rootWord2 = stemSingularWord(\"me\" + words[1]);\n    }\n    if(rootWord1==rootWord2){\n        return rootWord1;\n    }\n    else{\n        return plural_word;\n    }\n}\n\n// Stem for singular word\nfunction stemSingularWord(word){\n    original_word = word; // Save the original word for reverting later\n    current_word = word;\n\n    // Step 1\n    if(current_word.length>3){\n        // Step 2-5\n        stemmingProcess();\n    }\n\n    // Step 6\n    if(find(current_word)){\n        return current_word;\n    }\n    else{\n        return original_word;\n    }\n}\n\n// Return true if word is in plural form ex: gelas-gelas, else false\nfunction isPlural(token){\n    var matches = token.match(/^(.*)-(ku|mu|nya|lah|kah|tah|pun)$/);\n    if(matches){\n        return matches[1].search('-') != -1;\n    }\n    return token.search('-') != -1;\n}\n\n// Find certain word in dictionary\nfunction find(word) {\n    return (dictionary.indexOf(word) != -1);\n}\n\nfunction loadDictionary(){\n    var fs = require('fs');\n    //var dirname = __dirname + \"/../../../../data/kata-dasar.txt\";\n    //var fin = fs.readFileSync(dirname).toString().split(\"\\n\");\n    var fin = require('./data/kata-dasar.json');\n    fin.forEach(function (word) {\n        if (word) {\n          dictionary.push(word.trim());\n        }\n    });\n}\n\n// Stemming from step 2-5\nfunction stemmingProcess(){\n    if(find(current_word))\n        return\n\n    // Confix Stripping\n    // Try to remove prefixes first before suffixes if the specification is met\n    if(precedenceAdjustmentSpecification(original_word)){\n        // Step 4, 5\n        removePrefixes();\n        if(find(current_word))\n            return\n\n        // Step 2, 3\n        removeSuffixes();\n        if(find(current_word)){\n            return\n        }\n        else{\n            // if the trial is failed, restore the original word\n            // and continue to normal rule precedence (suffix first, prefix afterwards)\n            current_word = original_word;\n            removals = []\n        }\n    }\n\n    // Step 2, 3\n    removeSuffixes();\n    if(find(current_word))\n        return\n\n    // Step 4, 5\n    removePrefixes();\n    if(find(current_word))\n        return\n\n    //ECS Loop Restore Prefixes\n    loopRestorePrefixes();\n}\n\n// Remove Suffixes\nfunction removeSuffixes(){\n    for(var i in suffix_rules){\n        resultObj = suffix_rules[i](current_word);\n\n        // Add result to variable\n        if(resultObj.removal!=undefined){\n            removals.push(resultObj.removal);\n        }\n        current_word = resultObj.current_word;\n\n        if(find(current_word))\n            return current_word;\n    }\n}\n\n// Remove Prefixes\nfunction removePrefixes(){\n    for(var i=0; i<3; i++){\n        var removalCount = removals.length;\n        checkPrefixRules();\n        if(find(current_word))\n            return current_word;\n    }\n}\n\nfunction checkPrefixRules(){\n    var removalCount = removals.length;\n    var j = 0;\n    for(j=0; j<prefix_rules.length; j++){\n        resultObj = prefix_rules[j](current_word);\n\n        // Add result to variable\n        if(resultObj.removal!=undefined){\n            removals.push(resultObj.removal);\n        }\n        current_word = resultObj.current_word;\n\n        if(find(current_word))\n            return current_word;\n        if(removals.length>removalCount){\n            return\n        }\n    }\n}\n\n// Loop Restore Prefixes\nfunction loopRestorePrefixes(){\n    restorePrefix();\n\n    var reversed_removals = removals.reverse();\n    var temp_current_word = current_word;\n\n    for(var i in reversed_removals){\n        current_removal = reversed_removals[i];\n\n        if(!isSuffixRemovals(current_removal)){\n            continue\n        }\n\n        if(current_removal.getRemovedPart() == \"kan\"){\n            current_word = current_removal.getResult() + \"k\";\n\n            // Step 4, 5\n            removePrefixes();\n            if(find(current_word))\n                return\n            current_word = current_removal.getResult() + \"kan\";\n        }\n        else{\n            current_word = current_removal.getOriginalWord();\n        }\n\n        // Step 4, 5\n        removePrefixes();\n        if(find(current_word))\n            return\n\n        current_word = temp_current_word;\n    }\n}\n\nfunction isSuffixRemovals(removal){\n    var type = removal.getAffixType();\n    if(type == \"DS\" || type == \"PP\" || type == \"P\"){\n        return true;\n    }\n    return false;\n}\nfunction restorePrefix(){\n    for(var i=0; i<removals.length; i++){\n        current_word = removals[i].getOriginalWord();\n        break;\n    }\n\n    for(var i=0; i<removals.length; i++){\n        if(removals[i].getAffixType() == \"DP\"){\n            removals.splice(i, 1);\n            i--;\n        }\n    }\n}\n\n// Check if word require precedence adjustment or not\n// Adjustment means remove prefix then suffix instead of remove suffix then prefix\nfunction precedenceAdjustmentSpecification(word){\n    var regex_rules = [\n        /^be(.*)lah$/,\n        /^be(.*)an$/,\n        /^me(.*)i$/,\n        /^di(.*)i$/,\n        /^pe(.*)i$/,\n        /^ter(.*)i$/,\n    ];\n\n    for(var i in regex_rules){\n        if(word.match(regex_rules[i])){\n            return true;\n        }\n    }\n    return false;\n}\n\n//exports for tests\nstemmer.isPlural = isPlural;\nstemmer.dictionary = dictionary;\nstemmer.a = suffix_rules[0];\n"]},"metadata":{},"sourceType":"script"}