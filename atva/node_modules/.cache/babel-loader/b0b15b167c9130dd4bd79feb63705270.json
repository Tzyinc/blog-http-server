{"ast":null,"code":"module.exports = function () {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n    this.name = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        peg$FAILED = {},\n        peg$startRuleFunctions = {\n      transformation_rules: peg$parsetransformation_rules\n    },\n        peg$startRuleFunction = peg$parsetransformation_rules,\n        peg$c0 = [],\n        peg$c1 = peg$FAILED,\n        peg$c2 = function peg$c2(rules) {\n      var result = {};\n\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i][1];\n        result[rule.key()] = rule;\n      }\n\n      return result;\n    },\n        peg$c3 = function peg$c3(c1, c2, pred, pars) {\n      var result = null; // Construct rule\n\n      if (pars.length === 1) {\n        result = new TransformationRule(c1, c2, pred, pars[0]);\n      } else {\n        if (pars.length === 2) {\n          result = new TransformationRule(c1, c2, pred, pars[0], pars[1]);\n        } else {\n          result = new TransformationRule(c1, c2, pred);\n        }\n      }\n\n      return result;\n    },\n        peg$c4 = /^[!-~\\xA1-\\xFF]/,\n        peg$c5 = {\n      type: \"class\",\n      value: \"[!-~\\\\xA1-\\\\xFF]\",\n      description: \"[!-~\\\\xA1-\\\\xFF]\"\n    },\n        peg$c6 = function peg$c6(characters) {\n      var s = \"\";\n\n      for (var i = 0; i < characters.length; i++) {\n        s += characters[i];\n      }\n\n      return s;\n    },\n        peg$c7 = \"*\",\n        peg$c8 = {\n      type: \"literal\",\n      value: \"*\",\n      description: \"\\\"*\\\"\"\n    },\n        peg$c9 = function peg$c9(wc) {\n      return wc;\n    },\n        peg$c10 = \"\\r\\n\",\n        peg$c11 = {\n      type: \"literal\",\n      value: \"\\r\\n\",\n      description: \"\\\"\\\\r\\\\n\\\"\"\n    },\n        peg$c12 = \"\\n\",\n        peg$c13 = {\n      type: \"literal\",\n      value: \"\\n\",\n      description: \"\\\"\\\\n\\\"\"\n    },\n        peg$c14 = \"\\r\",\n        peg$c15 = {\n      type: \"literal\",\n      value: \"\\r\",\n      description: \"\\\"\\\\r\\\"\"\n    },\n        peg$c16 = \"//\",\n        peg$c17 = {\n      type: \"literal\",\n      value: \"//\",\n      description: \"\\\"//\\\"\"\n    },\n        peg$c18 = void 0,\n        peg$c19 = {\n      type: \"any\",\n      description: \"any character\"\n    },\n        peg$c20 = \" \",\n        peg$c21 = {\n      type: \"literal\",\n      value: \" \",\n      description: \"\\\" \\\"\"\n    },\n        peg$c22 = \"\\t\",\n        peg$c23 = {\n      type: \"literal\",\n      value: \"\\t\",\n      description: \"\\\"\\\\t\\\"\"\n    },\n        peg$currPos = 0,\n        peg$reportedPos = 0,\n        peg$cachedPos = 0,\n        peg$cachedPosDetails = {\n      line: 1,\n      column: 1,\n      seenCR: false\n    },\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(null, [{\n        type: \"other\",\n        description: description\n      }], peg$reportedPos);\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n\n          if (ch === \"\\n\") {\n            if (!details.seenCR) {\n              details.line++;\n            }\n\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = {\n            line: 1,\n            column: 1,\n            seenCR: false\n          };\n        }\n\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n        expected.sort(function (a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n          }\n\n          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n            return '\\\\x0' + hex(ch);\n          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n            return '\\\\x' + hex(ch);\n          }).replace(/[\\u0180-\\u0FFF]/g, function (ch) {\n            return \"\\\\u0\" + hex(ch);\n          }).replace(/[\\u1080-\\uFFFF]/g, function (ch) {\n            return \"\\\\u\" + hex(ch);\n          });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc,\n            foundDesc,\n            i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);\n    }\n\n    function peg$parsetransformation_rules() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parseS();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsetransformation_rule();\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseS();\n\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c1;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c1;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$c1;\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parseS();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetransformation_rule();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseS();\n\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c1;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c1;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c1;\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c2(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsetransformation_rule() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$parsecategory1();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseidentifier();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseidentifier();\n\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseidentifier();\n\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseidentifier();\n            }\n\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c3(s1, s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecategory1() {\n      var s0;\n      s0 = peg$parsewild_card();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseidentifier();\n      }\n\n      return s0;\n    }\n\n    function peg$parseidentifier() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n\n      if (peg$c4.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c5);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n\n          if (peg$c4.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c5);\n            }\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseS_no_eol();\n\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c6(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewild_card() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c8);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseS_no_eol();\n\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c9(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c10) {\n        s0 = peg$c10;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c11);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c12;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c13);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 13) {\n            s0 = peg$c14;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c15);\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseComment() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c16) {\n        s1 = peg$c16;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c17);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n\n        if (s5 === peg$FAILED) {\n          s4 = peg$c18;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c1;\n        }\n\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c19);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseEOL();\n          peg$silentFails--;\n\n          if (s5 === peg$FAILED) {\n            s4 = peg$c18;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c19);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseEOL();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseEOI();\n          }\n\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseS() {\n      var s0, s1;\n      s0 = [];\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c21);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 9) {\n          s1 = peg$c22;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c23);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseEOL();\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseComment();\n          }\n        }\n      }\n\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s1 = peg$c20;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c21);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 9) {\n            s1 = peg$c22;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseEOL();\n\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseComment();\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseS_no_eol() {\n      var s0, s1;\n      s0 = [];\n\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c21);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 9) {\n          s1 = peg$c22;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c23);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseComment();\n        }\n      }\n\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s1 = peg$c20;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c21);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 9) {\n            s1 = peg$c22;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c23);\n            }\n          }\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseComment();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOI() {\n      var s0, s1;\n      s0 = peg$currPos;\n      peg$silentFails++;\n\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c19);\n        }\n      }\n\n      peg$silentFails--;\n\n      if (s1 === peg$FAILED) {\n        s0 = peg$c18;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    var TransformationRule = require(\"./TransformationRule\");\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({\n          type: \"end\",\n          description: \"end of input\"\n        });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse: parse\n  };\n}();","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/brill_pos_tagger/lib/TF_Parser.js"],"names":["module","exports","peg$subclass","child","parent","ctor","constructor","prototype","SyntaxError","message","expected","found","offset","line","column","name","Error","parse","input","options","arguments","length","peg$FAILED","peg$startRuleFunctions","transformation_rules","peg$parsetransformation_rules","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","rules","result","i","rule","key","peg$c3","c1","c2","pred","pars","TransformationRule","peg$c4","peg$c5","type","value","description","peg$c6","characters","s","peg$c7","peg$c8","peg$c9","wc","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$currPos","peg$reportedPos","peg$cachedPos","peg$cachedPosDetails","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","text","substring","peg$computePosDetails","peg$buildException","error","pos","advance","details","startPos","endPos","p","ch","charAt","peg$fail","push","cleanupExpected","sort","a","b","splice","buildMessage","stringEscape","hex","charCodeAt","toString","toUpperCase","replace","expectedDescs","Array","expectedDesc","foundDesc","slice","join","posDetails","s0","s1","s2","s3","s4","s5","peg$parseS","peg$parsetransformation_rule","peg$parsecategory1","peg$parseidentifier","peg$parsewild_card","test","peg$parseS_no_eol","peg$parseEOL","substr","peg$parseComment","peg$parseEOI","require"],"mappings":"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","sourcesContent":["module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { transformation_rules: peg$parsetransformation_rules },\n        peg$startRuleFunction  = peg$parsetransformation_rules,\n\n        peg$c0 = [],\n        peg$c1 = peg$FAILED,\n        peg$c2 = function(rules) {\n          var result = {};\n\n          for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i][1];\n            result[rule.key()] = rule;\n          }\n          return(result);\n        },\n        peg$c3 = function(c1, c2, pred, pars) {\n          var result = null;\n\n          // Construct rule\n          if (pars.length === 1) {\n            result = new TransformationRule(c1, c2, pred, pars[0]);\n          }\n          else {\n            if (pars.length === 2) {\n              result = new TransformationRule(c1, c2, pred, pars[0], pars[1]);\n            }\n            else {\n              result = new TransformationRule(c1, c2, pred);\n            }\n          }\n          return(result);\n        },\n        peg$c4 = /^[!-~\\xA1-\\xFF]/,\n        peg$c5 = { type: \"class\", value: \"[!-~\\\\xA1-\\\\xFF]\", description: \"[!-~\\\\xA1-\\\\xFF]\" },\n        peg$c6 = function(characters) {\n           var s = \"\";\n           for (var i = 0; i < characters.length; i++) {\n             s += characters[i];\n           }\n           return(s);\n          },\n        peg$c7 = \"*\",\n        peg$c8 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c9 = function(wc) {\n           return(wc)\n          },\n        peg$c10 = \"\\r\\n\",\n        peg$c11 = { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n        peg$c12 = \"\\n\",\n        peg$c13 = { type: \"literal\", value: \"\\n\", description: \"\\\"\\\\n\\\"\" },\n        peg$c14 = \"\\r\",\n        peg$c15 = { type: \"literal\", value: \"\\r\", description: \"\\\"\\\\r\\\"\" },\n        peg$c16 = \"//\",\n        peg$c17 = { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n        peg$c18 = void 0,\n        peg$c19 = { type: \"any\", description: \"any character\" },\n        peg$c20 = \" \",\n        peg$c21 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c22 = \"\\t\",\n        peg$c23 = { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsetransformation_rules() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parseS();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsetransformation_rule();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseS();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c1;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c1;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$c1;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parseS();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetransformation_rule();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseS();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c1;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c1;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c1;\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsetransformation_rule() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecategory1();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseidentifier();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseidentifier();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseidentifier();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseidentifier();\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c3(s1, s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecategory1() {\n      var s0;\n\n      s0 = peg$parsewild_card();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseidentifier();\n      }\n\n      return s0;\n    }\n\n    function peg$parseidentifier() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c4.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c4.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c5); }\n          }\n        }\n      } else {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseS_no_eol();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c6(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsewild_card() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseS_no_eol();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c9(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOL() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c10) {\n        s0 = peg$c10;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c12;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c13); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 13) {\n            s0 = peg$c14;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c15); }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseComment() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c16) {\n        s1 = peg$c16;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = peg$c18;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c1;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c1;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseEOL();\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = peg$c18;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c1;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c1;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseEOL();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseEOI();\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseS() {\n      var s0, s1;\n\n      s0 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 9) {\n          s1 = peg$c22;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseEOL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseComment();\n          }\n        }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s1 = peg$c20;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 9) {\n            s1 = peg$c22;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseEOL();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseComment();\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseS_no_eol() {\n      var s0, s1;\n\n      s0 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 9) {\n          s1 = peg$c22;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseComment();\n        }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s1 = peg$c20;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 9) {\n            s1 = peg$c22;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseComment();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseEOI() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = peg$c18;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n\n      var TransformationRule = require(\"./TransformationRule\");\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n"]},"metadata":{},"sourceType":"script"}