{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Summarizer = require('./Summarizer').Summarizer;\n\nvar natural = require(\"natural\");\n\nvar SummarizerManager =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function SummarizerManager(string, number_of_sentences) {\n    _classCallCheck(this, SummarizerManager);\n\n    this.string = string;\n    this.number_of_sentences = number_of_sentences;\n    this.rank_summary = \"\";\n    this.frequency_summary = \"\";\n  }\n\n  _createClass(SummarizerManager, [{\n    key: \"getSentiment\",\n    value: function getSentiment() {\n      var self = this;\n\n      var Analyzer = require('natural').SentimentAnalyzer;\n\n      var stemmer = require('natural').PorterStemmer;\n\n      var analyzer = new Analyzer(\"English\", stemmer, \"afinn\");\n      return analyzer.getSentiment(self.string.split(\" \"));\n    }\n  }, {\n    key: \"getFrequencyReduction\",\n    value: function getFrequencyReduction() {\n      if (this.frequency_summary == \"\") {\n        this.frequency_summary = this.getSummaryByFrequency().summary;\n      }\n\n      var dec = 1 - this.frequency_summary.length / this.string.length;\n      var string_dec = String(dec);\n      return {\n        reduction: string_dec.slice(2, 4) + \".\" + string_dec.slice(4, 5) + \"%\",\n        summary: this.frequency_summary\n      };\n    }\n  }, {\n    key: \"getRankReduction\",\n    value: function getRankReduction() {\n      var dec, string_dec;\n      return _regeneratorRuntime.async(function getRankReduction$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.rank_summary == \"\")) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.getSummaryByRank());\n\n            case 3:\n              dec = 1 - this.rank_summary.length / this.string.length;\n              string_dec = String(dec);\n              return _context.abrupt(\"return\", {\n                reduction: string_dec.slice(2, 4) + \".\" + string_dec.slice(4, 5) + \"%\",\n                summary: this.rank_summary\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"getRankReductionAsDec\",\n    value: function getRankReductionAsDec() {\n      var dec;\n      return _regeneratorRuntime.async(function getRankReductionAsDec$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.rank_summary == \"\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this.getSummaryByRank());\n\n            case 3:\n              dec = 1 - this.rank_summary.length / this.string.length;\n              return _context2.abrupt(\"return\", {\n                dec_reduction: dec,\n                summary: this.rank_summary\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"getFrequencyReductionAsDec\",\n    value: function getFrequencyReductionAsDec() {\n      if (this.frequency_summary == \"\") {\n        this.frequency_summary = this.getSummaryByFrequency().summary;\n      }\n\n      var dec = 1 - this.frequency_summary.length / this.string.length;\n      return {\n        dec_reduction: dec,\n        summary: this.frequency_summary\n      };\n    }\n  }, {\n    key: \"getSummaryByFrequency\",\n    value: function getSummaryByFrequency() {\n      try {\n        var summarizer = new Summarizer(this.string, this.number_of_sentences);\n        var summary_obj = summarizer.summarizeByFrequency();\n        this.frequency_summary = summary_obj.summary;\n\n        if (summary_obj.summary == '') {\n          summary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"), summary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\");\n        }\n\n        return summary_obj;\n      } catch (err) {\n        return Error(\"An invalid sentence was entered\");\n      }\n    }\n  }, {\n    key: \"getSummaryByRank\",\n    value: function getSummaryByRank() {\n      var summarizer, summary_obj;\n      return _regeneratorRuntime.async(function getSummaryByRank$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              summarizer = new Summarizer(this.string, this.number_of_sentences);\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(summarizer.summarizeByRank());\n\n            case 4:\n              summary_obj = _context3.sent;\n\n              if (typeof summary_obj.summary === 'undefined' || summary_obj.summary == '') {\n                summary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"), summary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\");\n              }\n\n              this.rank_summary = summary_obj.summary;\n              return _context3.abrupt(\"return\", summary_obj);\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n              return _context3.abrupt(\"return\", Error(\"An invalid sentence was entered\"));\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[0, 10]]);\n    }\n  }]);\n\n  return SummarizerManager;\n}();\n\nmodule.exports = SummarizerManager;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/node-summarizer/src/SummarizerManager.js"],"names":["Summarizer","require","natural","SummarizerManager","string","number_of_sentences","rank_summary","frequency_summary","self","Analyzer","SentimentAnalyzer","stemmer","PorterStemmer","analyzer","getSentiment","split","getSummaryByFrequency","summary","dec","length","string_dec","String","reduction","slice","getSummaryByRank","dec_reduction","summarizer","summary_obj","summarizeByFrequency","Error","sentence_list","err","summarizeByRank","module","exports"],"mappings":"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","sourcesContent":["const Summarizer = require('./Summarizer').Summarizer;\nconst natural = require(\"natural\");\n\nclass SummarizerManager{\n\tconstructor(string, number_of_sentences){\n\t\tthis.string = string;\n\t\tthis.number_of_sentences = number_of_sentences;\n\t\tthis.rank_summary = \"\";\n\t\tthis.frequency_summary = \"\";\n\t}\n\n\tgetSentiment(){\n\t\tlet self = this;\n\t\tlet Analyzer = require('natural').SentimentAnalyzer;\n\t\tlet stemmer = require('natural').PorterStemmer;\n\t\tlet analyzer = new Analyzer(\"English\", stemmer, \"afinn\");\n\t\treturn analyzer.getSentiment(self.string.split(\" \"));\n\t\t\n\t}\n\tgetFrequencyReduction(){\n\t\tif (this.frequency_summary == \"\"){\n\t\t\tthis.frequency_summary = this.getSummaryByFrequency().summary;\n\t\t}\n\t\tlet dec = 1-(this.frequency_summary.length/this.string.length);\n\t\tlet string_dec = String(dec);\n\t\treturn {\n\t\t\treduction: string_dec.slice(2,4)+\".\"+string_dec.slice(4,5)+\"%\",\n\t\t\tsummary: this.frequency_summary\n\t\t};\n\t}\n\n\tasync getRankReduction(){\n\t\tif (this.rank_summary == \"\"){\n\t\t\tawait this.getSummaryByRank();\t\n\t\t}\n\t\tlet dec = 1-(this.rank_summary.length/this.string.length);\n\t\tlet string_dec = String(dec);\n\t\treturn {\n\t\t\treduction: string_dec.slice(2,4)+\".\"+string_dec.slice(4,5)+\"%\",\n\t\t\tsummary: this.rank_summary\n\t\t}\n\n\t}\n\n\tasync getRankReductionAsDec(){\n\t\tif (this.rank_summary == \"\"){\n\t\t\tawait this.getSummaryByRank();\n\t\t}\n\t\tlet dec = 1-(this.rank_summary.length/this.string.length);\n\t\treturn {\n\t\t\tdec_reduction: dec,\n\t\t\tsummary: this.rank_summary\n\t\t}\n\t}\n\n\tgetFrequencyReductionAsDec(){\n\t\tif (this.frequency_summary == \"\"){\n\t\t\tthis.frequency_summary = this.getSummaryByFrequency().summary;\n\t\t}\n\t\tlet dec = 1-(this.frequency_summary.length/this.string.length);\n\t\treturn {\n\t\t\tdec_reduction: dec,\n\t\t\tsummary: this.frequency_summary\n\t\t}\n\t}\n\n\tgetSummaryByFrequency(){\n\t\ttry{\n\t\t\tlet summarizer = new Summarizer(this.string, this.number_of_sentences);\n\t\t\tconst summary_obj = summarizer.summarizeByFrequency();\n\t\t\tthis.frequency_summary = summary_obj.summary;\n\t\t\tif(summary_obj.summary == ''){\n\t\t\t\tsummary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"),\n\t\t\t\tsummary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\")\n\t\t\t}\n\t\t\treturn summary_obj;\n\t\t}catch(err){\n\t\t\treturn Error(\"An invalid sentence was entered\");\n\t\t}\n\n\t}\n\n\tasync getSummaryByRank(){\n\t\ttry{\n\t\t\tlet summarizer = new Summarizer(this.string, this.number_of_sentences);\n\t\t\tconst summary_obj = await summarizer.summarizeByRank();\n\t\t\tif(typeof(summary_obj.summary) === 'undefined' || summary_obj.summary == ''){\n\t\t\t\tsummary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"),\n\t\t\t\tsummary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\")\n\t\t\t}\n\t\t\tthis.rank_summary = summary_obj.summary;\n\t\t\treturn summary_obj;\n\t\t}catch(err){\n\t\t\treturn Error(\"An invalid sentence was entered\");\n\t\t}\n\t}\n}\n\nmodule.exports = SummarizerManager;"]},"metadata":{},"sourceType":"script"}