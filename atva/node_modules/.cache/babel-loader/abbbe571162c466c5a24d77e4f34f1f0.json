{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nvar PorterStemmer = require('../stemmers/porter_stemmer'),\n    util = require('util'),\n    events = require('events'),\n    os = require('os');\n\ntry {\n  var Threads = require('webworker-threads');\n} catch (e) {\n  // Since webworker-threads are optional, only thow if the module is found\n  if (e.code !== 'MODULE_NOT_FOUND') throw e;\n}\n\nfunction checkThreadSupport() {\n  if (typeof Threads === 'undefined') {\n    throw new Error('parallel classification requires the optional dependency webworker-threads');\n  }\n}\n\nvar Classifier = function Classifier(classifier, stemmer) {\n  this.classifier = classifier;\n  this.docs = [];\n  this.features = {};\n  this.stemmer = stemmer || PorterStemmer;\n  this.lastAdded = 0;\n  this.events = new events.EventEmitter();\n};\n\nfunction addDocument(text, classification) {\n  // Ignore further processing if classification is undefined\n  if (typeof classification === 'undefined') return; // If classification is type of string then make sure it's dosen't have blank space at both end\n\n  if (typeof classification === 'string') {\n    classification = classification.trim();\n  }\n\n  if (typeof text === 'string') text = this.stemmer.tokenizeAndStem(text, this.keepStops);\n\n  if (text.length === 0) {\n    // ignore empty documents\n    return;\n  }\n\n  this.docs.push({\n    label: classification,\n    text: text\n  });\n\n  for (var i = 0; i < text.length; i++) {\n    var token = text[i];\n    this.features[token] = (this.features[token] || 0) + 1;\n  }\n}\n\nfunction removeDocument(text, classification) {\n  var docs = this.docs,\n      doc,\n      pos;\n\n  if (typeof text === 'string') {\n    text = this.stemmer.tokenizeAndStem(text, this.keepStops);\n  }\n\n  for (var i = 0, ii = docs.length; i < ii; i++) {\n    doc = docs[i];\n\n    if (doc.text.join(' ') == text.join(' ') && doc.label == classification) {\n      pos = i;\n    }\n  } // Remove if there's a match\n\n\n  if (!isNaN(pos)) {\n    this.docs.splice(pos, 1);\n\n    for (var i = 0, ii = text.length; i < ii; i++) {\n      delete this.features[text[i]];\n    }\n  }\n}\n\nfunction textToFeatures(observation) {\n  var features = [];\n  if (typeof observation === 'string') observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n\n  for (var feature in this.features) {\n    if (observation.indexOf(feature) > -1) features.push(1);else features.push(0);\n  }\n\n  return features;\n}\n\nfunction docsToFeatures(docs) {\n  var parsedDocs = [];\n\n  for (var i = 0; i < docs.length; i++) {\n    var features = [];\n\n    for (var feature in FEATURES) {\n      if (docs[i].observation.indexOf(feature) > -1) features.push(1);else features.push(0);\n    }\n\n    parsedDocs.push({\n      index: docs[i].index,\n      features: features\n    });\n  }\n\n  return JSON.stringify(parsedDocs);\n}\n\nfunction train() {\n  var totalDocs = this.docs.length;\n\n  for (var i = this.lastAdded; i < totalDocs; i++) {\n    var features = this.textToFeatures(this.docs[i].text);\n    this.classifier.addExample(features, this.docs[i].label);\n    this.events.emit('trainedWithDocument', {\n      index: i,\n      total: totalDocs,\n      doc: this.docs[i]\n    });\n    this.lastAdded++;\n  }\n\n  this.events.emit('doneTraining', true);\n  this.classifier.train();\n}\n\nfunction trainParallel(numThreads, callback) {\n  checkThreadSupport();\n\n  if (!callback) {\n    callback = numThreads;\n    numThreads = undefined;\n  }\n\n  if (isNaN(numThreads)) {\n    numThreads = os.cpus().length;\n  }\n\n  var totalDocs = this.docs.length;\n  var threadPool = Threads.createPool(numThreads);\n  var docFeatures = {};\n  var finished = 0;\n  var self = this; // Init pool; send the features array and the parsing function\n\n  threadPool.all.eval('var FEATURES = ' + JSON.stringify(this.features));\n  threadPool.all.eval(docsToFeatures); // Convert docs to observation objects\n\n  var obsDocs = [];\n\n  for (var i = this.lastAdded; i < totalDocs; i++) {\n    var observation = this.docs[i].text;\n    if (typeof observation === 'string') observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n    obsDocs.push({\n      index: i,\n      observation: observation\n    });\n  } // Called when a batch completes processing\n\n\n  var onFeaturesResult = function onFeaturesResult(docs) {\n    setTimeout(function () {\n      self.events.emit('processedBatch', {\n        size: docs.length,\n        docs: totalDocs,\n        batches: numThreads,\n        index: finished\n      });\n    });\n\n    for (var j = 0; j < docs.length; j++) {\n      docFeatures[docs[j].index] = docs[j].features;\n    }\n  }; // Called when all batches finish processing\n\n\n  var onFinished = function onFinished(err) {\n    if (err) {\n      threadPool.destroy();\n      return callback(err);\n    }\n\n    for (var j = self.lastAdded; j < totalDocs; j++) {\n      self.classifier.addExample(docFeatures[j], self.docs[j].label);\n      self.events.emit('trainedWithDocument', {\n        index: j,\n        total: totalDocs,\n        doc: self.docs[j]\n      });\n      self.lastAdded++;\n    }\n\n    self.events.emit('doneTraining', true);\n    self.classifier.train();\n    threadPool.destroy();\n    callback(null);\n  }; // Split the docs and start processing\n\n\n  var batchSize = Math.ceil(obsDocs.length / numThreads);\n  var lastError;\n\n  for (var i = 0; i < numThreads; i++) {\n    var batchDocs = obsDocs.slice(i * batchSize, (i + 1) * batchSize);\n    var batchJson = JSON.stringify(batchDocs);\n    threadPool.any.eval('docsToFeatures(' + batchJson + ')', function (err, docs) {\n      lastError = err || lastError;\n      finished++;\n\n      if (docs) {\n        docs = JSON.parse(docs);\n        onFeaturesResult(docs);\n      }\n\n      if (finished >= numThreads) {\n        onFinished(lastError);\n      }\n    });\n  }\n}\n\nfunction trainParallelBatches(options) {\n  checkThreadSupport();\n  var numThreads = options && options.numThreads;\n  var batchSize = options && options.batchSize;\n\n  if (isNaN(numThreads)) {\n    numThreads = os.cpus().length;\n  }\n\n  if (isNaN(batchSize)) {\n    batchSize = 2500;\n  }\n\n  var totalDocs = this.docs.length;\n  var threadPool = Threads.createPool(numThreads);\n  var docFeatures = {};\n  var finished = 0;\n  var self = this;\n  var abort = false;\n\n  var onError = function onError(err) {\n    if (!err || abort) return;\n    abort = true;\n    threadPool.destroy(true);\n    self.events.emit('doneTrainingError', err);\n  }; // Init pool; send the features array and the parsing function\n\n\n  var str = JSON.stringify(this.features);\n  threadPool.all.eval('var FEATURES = ' + str + ';', onError);\n  threadPool.all.eval(docsToFeatures, onError); // Convert docs to observation objects\n\n  var obsDocs = [];\n\n  for (var i = this.lastAdded; i < totalDocs; i++) {\n    var observation = this.docs[i].text;\n    if (typeof observation === 'string') observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n    obsDocs.push({\n      index: i,\n      observation: observation\n    });\n  } // Split the docs in batches\n\n\n  var obsBatches = [];\n  var i = 0;\n\n  while (true) {\n    var batch = obsDocs.slice(i * batchSize, (i + 1) * batchSize);\n    if (!batch || !batch.length) break;\n    obsBatches.push(batch);\n    i++;\n  }\n\n  obsDocs = null;\n  self.events.emit('startedTraining', {\n    docs: totalDocs,\n    batches: obsBatches.length\n  }); // Called when a batch completes processing\n\n  var onFeaturesResult = function onFeaturesResult(docs) {\n    self.events.emit('processedBatch', {\n      size: docs.length,\n      docs: totalDocs,\n      batches: obsBatches.length,\n      index: finished\n    });\n\n    for (var j = 0; j < docs.length; j++) {\n      docFeatures[docs[j].index] = docs[j].features;\n    }\n  }; // Called when all batches finish processing\n\n\n  var onFinished = function onFinished() {\n    threadPool.destroy(true);\n    abort = true;\n\n    for (var j = self.lastAdded; j < totalDocs; j++) {\n      self.classifier.addExample(docFeatures[j], self.docs[j].label);\n      self.events.emit('trainedWithDocument', {\n        index: j,\n        total: totalDocs,\n        doc: self.docs[j]\n      });\n      self.lastAdded++;\n    }\n\n    self.events.emit('doneTraining', true);\n    self.classifier.train();\n  }; // Called to send the next batch to be processed\n\n\n  var batchIndex = 0;\n\n  var sendNext = function sendNext() {\n    if (abort) return;\n\n    if (batchIndex >= obsBatches.length) {\n      return;\n    }\n\n    sendBatch(JSON.stringify(obsBatches[batchIndex]));\n    batchIndex++;\n  }; // Called to send a batch of docs to the threads\n\n\n  var sendBatch = function sendBatch(batchJson) {\n    if (abort) return;\n    threadPool.any.eval('docsToFeatures(' + batchJson + ');', function (err, docs) {\n      if (err) {\n        return onError(err);\n      }\n\n      finished++;\n\n      if (docs) {\n        docs = JSON.parse(docs);\n        setTimeout(onFeaturesResult.bind(null, docs));\n      }\n\n      if (finished >= obsBatches.length) {\n        setTimeout(onFinished);\n      }\n\n      setTimeout(sendNext);\n    });\n  }; // Start processing\n\n\n  for (var i = 0; i < numThreads; i++) {\n    sendNext();\n  }\n}\n\nfunction retrain() {\n  this.classifier = new this.classifier.constructor();\n  this.lastAdded = 0;\n  this.train();\n}\n\nfunction retrainParallel(numThreads, callback) {\n  this.classifier = new this.classifier.constructor();\n  this.lastAdded = 0;\n  this.trainParallel(numThreads, callback);\n}\n\nfunction getClassifications(observation) {\n  return this.classifier.getClassifications(this.textToFeatures(observation));\n}\n\nfunction classify(observation) {\n  return this.classifier.classify(this.textToFeatures(observation));\n}\n\nfunction restore(classifier, stemmer) {\n  classifier.stemmer = stemmer || PorterStemmer;\n  classifier.events = new events.EventEmitter();\n  return classifier;\n}\n\nfunction save(filename, callback) {\n  var data = JSON.stringify(this);\n\n  var fs = require('fs');\n\n  var classifier = this;\n  fs.writeFile(filename, data, 'utf8', function (err) {\n    if (callback) {\n      callback(err, err ? null : classifier);\n    }\n  });\n}\n\nfunction load(filename, callback) {\n  var fs = require('fs');\n\n  fs.readFile(filename, 'utf8', function (err, data) {\n    var classifier;\n\n    if (!err) {\n      classifier = JSON.parse(data);\n    }\n\n    if (callback) callback(err, classifier);\n  });\n}\n\nfunction setOptions(options) {\n  this.keepStops = options.keepStops ? true : false;\n}\n\nClassifier.prototype.addDocument = addDocument;\nClassifier.prototype.removeDocument = removeDocument;\nClassifier.prototype.train = train;\n\nif (Threads) {\n  Classifier.prototype.trainParallel = trainParallel;\n  Classifier.prototype.trainParallelBatches = trainParallelBatches;\n  Classifier.prototype.retrainParallel = retrainParallel;\n}\n\nClassifier.prototype.retrain = retrain;\nClassifier.prototype.classify = classify;\nClassifier.prototype.textToFeatures = textToFeatures;\nClassifier.prototype.save = save;\nClassifier.prototype.getClassifications = getClassifications;\nClassifier.prototype.setOptions = setOptions;\nClassifier.restore = restore;\nClassifier.load = load;\nmodule.exports = Classifier;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/classifiers/classifier.js"],"names":["PorterStemmer","require","util","events","os","Threads","e","code","checkThreadSupport","Error","Classifier","classifier","stemmer","docs","features","lastAdded","EventEmitter","addDocument","text","classification","trim","tokenizeAndStem","keepStops","length","push","label","i","token","removeDocument","doc","pos","ii","join","isNaN","splice","textToFeatures","observation","feature","indexOf","docsToFeatures","parsedDocs","FEATURES","index","JSON","stringify","train","totalDocs","addExample","emit","total","trainParallel","numThreads","callback","undefined","cpus","threadPool","createPool","docFeatures","finished","self","all","eval","obsDocs","onFeaturesResult","setTimeout","size","batches","j","onFinished","err","destroy","batchSize","Math","ceil","lastError","batchDocs","slice","batchJson","any","parse","trainParallelBatches","options","abort","onError","str","obsBatches","batch","batchIndex","sendNext","sendBatch","bind","retrain","constructor","retrainParallel","getClassifications","classify","restore","save","filename","data","fs","writeFile","load","readFile","setOptions","prototype","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar PorterStemmer = require('../stemmers/porter_stemmer'),\nutil = require('util'),\nevents = require('events'),\nos = require('os');\n\ntry {\n    var Threads = require('webworker-threads');\n} catch (e) {\n    // Since webworker-threads are optional, only thow if the module is found\n    if (e.code !== 'MODULE_NOT_FOUND') throw e;\n}\n\nfunction checkThreadSupport() {\n    if (typeof Threads === 'undefined') {\n        throw new Error('parallel classification requires the optional dependency webworker-threads');\n    }\n}\n\nvar Classifier = function(classifier, stemmer) {\n    this.classifier = classifier;\n    this.docs = [];\n    this.features = {};\n    this.stemmer = stemmer || PorterStemmer;\n    this.lastAdded = 0;\n    this.events = new events.EventEmitter();\n};\n\nfunction addDocument(text, classification) {\n\n    // Ignore further processing if classification is undefined\n    if(typeof classification === 'undefined') return;\n\n    // If classification is type of string then make sure it's dosen't have blank space at both end\n    if(typeof classification === 'string'){\n      classification = classification.trim();\n    }\n\n    if(typeof text === 'string')\n\ttext = this.stemmer.tokenizeAndStem(text, this.keepStops);\n\n    if(text.length === 0) {\n        // ignore empty documents\n        return;\n    }\n\n    this.docs.push({\n\tlabel: classification,\n\ttext: text\n    });\n\n    for (var i = 0; i < text.length; i++) {\n        var token = text[i];\n        this.features[token] = (this.features[token] || 0) + 1;\n    }\n}\n\nfunction removeDocument(text, classification) {\n  var docs = this.docs\n    , doc\n    , pos;\n\n  if (typeof text === 'string') {\n    text = this.stemmer.tokenizeAndStem(text, this.keepStops);\n  }\n\n  for (var i = 0, ii = docs.length; i < ii; i++) {\n    doc = docs[i];\n    if (doc.text.join(' ') == text.join(' ') &&\n        doc.label == classification) {\n      pos = i;\n    }\n  }\n\n  // Remove if there's a match\n  if (!isNaN(pos)) {\n    this.docs.splice(pos, 1);\n\n    for (var i = 0, ii = text.length; i < ii; i++) {\n      delete this.features[text[i]];\n    }\n  }\n}\n\nfunction textToFeatures(observation) {\n    var features = [];\n\n    if(typeof observation === 'string')\n\tobservation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n\n    for(var feature in this.features) {\n        if(observation.indexOf(feature) > -1)\n            features.push(1);\n        else\n            features.push(0);\n    }\n\n    return features;\n}\n\nfunction docsToFeatures(docs) {\n    var parsedDocs = [];\n\n    for (var i = 0; i < docs.length; i++) {\n        var features = [];\n\n        for (var feature in FEATURES) {\n            if (docs[i].observation.indexOf(feature) > -1)\n                features.push(1);\n            else\n                features.push(0);\n        }\n\n        parsedDocs.push({\n            index: docs[i].index,\n            features: features\n        });\n    }\n\n    return JSON.stringify(parsedDocs);\n}\n\nfunction train() {\n    var totalDocs = this.docs.length;\n    for(var i = this.lastAdded; i < totalDocs; i++) {\n        var features = this.textToFeatures(this.docs[i].text);\n        this.classifier.addExample(features, this.docs[i].label);\n        this.events.emit('trainedWithDocument', {index: i, total: totalDocs, doc: this.docs[i]});\n        this.lastAdded++;\n    }\n    this.events.emit('doneTraining', true);\n    this.classifier.train();\n}\n\nfunction trainParallel(numThreads, callback) {\n    checkThreadSupport();\n\n    if (!callback) {\n        callback = numThreads;\n        numThreads = undefined;\n    }\n\n    if (isNaN(numThreads)) {\n        numThreads = os.cpus().length;\n    }\n\n    var totalDocs = this.docs.length;\n    var threadPool = Threads.createPool(numThreads);\n    var docFeatures = {};\n    var finished = 0;\n    var self = this;\n\n    // Init pool; send the features array and the parsing function\n    threadPool.all.eval('var FEATURES = ' + JSON.stringify(this.features));\n    threadPool.all.eval(docsToFeatures);\n\n    // Convert docs to observation objects\n    var obsDocs = [];\n    for (var i = this.lastAdded; i < totalDocs; i++) {\n        var observation = this.docs[i].text;\n        if (typeof observation === 'string')\n            observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n        obsDocs.push({\n            index: i,\n            observation: observation\n        });\n    }\n\n    // Called when a batch completes processing\n    var onFeaturesResult = function(docs) {\n        setTimeout(function() {\n            self.events.emit('processedBatch', {\n                size: docs.length,\n                docs: totalDocs,\n                batches: numThreads,\n                index: finished\n            });\n        });\n\n        for (var j = 0; j < docs.length; j++) {\n            docFeatures[docs[j].index] = docs[j].features;\n        }\n    };\n\n    // Called when all batches finish processing\n    var onFinished = function(err) {\n        if (err) {\n            threadPool.destroy();\n            return callback(err);\n        }\n\n        for (var j = self.lastAdded; j < totalDocs; j++) {\n            self.classifier.addExample(docFeatures[j], self.docs[j].label);\n            self.events.emit('trainedWithDocument', {\n                index: j,\n                total: totalDocs,\n                doc: self.docs[j]\n            });\n            self.lastAdded++;\n        }\n\n        self.events.emit('doneTraining', true);\n        self.classifier.train();\n\n        threadPool.destroy();\n        callback(null);\n    };\n\n    // Split the docs and start processing\n    var batchSize = Math.ceil(obsDocs.length / numThreads);\n    var lastError;\n\n    for (var i = 0; i < numThreads; i++) {\n        var batchDocs = obsDocs.slice(i * batchSize, (i+1) * batchSize);\n        var batchJson = JSON.stringify(batchDocs);\n\n        threadPool.any.eval('docsToFeatures(' + batchJson + ')', function(err, docs) {\n            lastError = err || lastError;\n            finished++;\n\n            if (docs) {\n                docs = JSON.parse(docs);\n                onFeaturesResult(docs);\n            }\n\n            if (finished >= numThreads) {\n                onFinished(lastError);\n            }\n        });\n    }\n}\n\nfunction trainParallelBatches(options) {\n    checkThreadSupport();\n\n    var numThreads = options && options.numThreads;\n    var batchSize = options && options.batchSize;\n\n    if (isNaN(numThreads)) {\n        numThreads = os.cpus().length;\n    }\n\n    if (isNaN(batchSize)) {\n        batchSize = 2500;\n    }\n\n    var totalDocs = this.docs.length;\n    var threadPool = Threads.createPool(numThreads);\n    var docFeatures = {};\n    var finished = 0;\n    var self = this;\n\n    var abort = false;\n    var onError = function(err) {\n        if (!err || abort) return;\n        abort = true;\n        threadPool.destroy(true);\n        self.events.emit('doneTrainingError', err);\n    };\n\n    // Init pool; send the features array and the parsing function\n    var str = JSON.stringify(this.features);\n    threadPool.all.eval('var FEATURES = ' + str + ';', onError);\n    threadPool.all.eval(docsToFeatures, onError);\n\n    // Convert docs to observation objects\n    var obsDocs = [];\n    for (var i = this.lastAdded; i < totalDocs; i++) {\n        var observation = this.docs[i].text;\n        if (typeof observation === 'string')\n            observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);\n        obsDocs.push({\n            index: i,\n            observation: observation\n        });\n    }\n\n    // Split the docs in batches\n    var obsBatches = [];\n    var i = 0;\n    while (true) {\n        var batch = obsDocs.slice(i * batchSize, (i+1) * batchSize);\n        if (!batch || !batch.length) break;\n        obsBatches.push(batch);\n        i++;\n    }\n    obsDocs = null;\n    self.events.emit('startedTraining', {\n        docs: totalDocs,\n        batches: obsBatches.length\n    });\n\n    // Called when a batch completes processing\n    var onFeaturesResult = function(docs) {\n        self.events.emit('processedBatch', {\n            size: docs.length,\n            docs: totalDocs,\n            batches: obsBatches.length,\n            index: finished\n        });\n\n        for (var j = 0; j < docs.length; j++) {\n            docFeatures[docs[j].index] = docs[j].features;\n        }\n    };\n\n    // Called when all batches finish processing\n    var onFinished = function() {\n        threadPool.destroy(true);\n        abort = true;\n\n        for (var j = self.lastAdded; j < totalDocs; j++) {\n            self.classifier.addExample(docFeatures[j], self.docs[j].label);\n            self.events.emit('trainedWithDocument', {\n                index: j,\n                total: totalDocs,\n                doc: self.docs[j]\n            });\n            self.lastAdded++;\n        }\n\n        self.events.emit('doneTraining', true);\n        self.classifier.train();\n    };\n\n    // Called to send the next batch to be processed\n    var batchIndex = 0;\n    var sendNext = function() {\n        if (abort) return;\n        if (batchIndex >= obsBatches.length) {\n            return;\n        }\n\n        sendBatch(JSON.stringify(obsBatches[batchIndex]));\n        batchIndex++;\n    };\n\n    // Called to send a batch of docs to the threads\n    var sendBatch = function(batchJson) {\n        if (abort) return;\n        threadPool.any.eval('docsToFeatures(' + batchJson + ');', function(err, docs) {\n            if (err) {\n                return onError(err);\n            }\n\n            finished++;\n\n            if (docs) {\n                docs = JSON.parse(docs);\n                setTimeout(onFeaturesResult.bind(null, docs));\n            }\n\n            if (finished >= obsBatches.length) {\n                setTimeout(onFinished);\n            }\n\n            setTimeout(sendNext);\n        });\n    };\n\n    // Start processing\n    for (var i = 0; i < numThreads; i++) {\n        sendNext();\n    }\n}\n\nfunction retrain() {\n  this.classifier = new (this.classifier.constructor)();\n  this.lastAdded = 0;\n  this.train();\n}\n\nfunction retrainParallel(numThreads, callback) {\n  this.classifier = new (this.classifier.constructor)();\n  this.lastAdded = 0;\n  this.trainParallel(numThreads, callback);\n}\n\nfunction getClassifications(observation) {\n    return this.classifier.getClassifications(this.textToFeatures(observation));\n}\n\nfunction classify(observation) {\n    return this.classifier.classify(this.textToFeatures(observation));\n}\n\nfunction restore(classifier, stemmer) {\n    classifier.stemmer = stemmer || PorterStemmer;\n    classifier.events = new events.EventEmitter();\n    return classifier;\n}\n\nfunction save(filename, callback) {\n    var data = JSON.stringify(this);\n    var fs = require('fs');\n    var classifier = this;\n    fs.writeFile(filename, data, 'utf8', function(err) {\n        if(callback) {\n            callback(err, err ? null : classifier);\n        }\n    });\n}\n\nfunction load(filename, callback) {\n    var fs = require('fs');\n\n    fs.readFile(filename, 'utf8', function(err, data) {\n        var classifier;\n\n        if(!err) {\n            classifier = JSON.parse(data);\n        }\n\n        if(callback)\n            callback(err, classifier);\n    });\n}\n\nfunction setOptions(options){\n    this.keepStops = (options.keepStops) ? true : false;\n}\n\nClassifier.prototype.addDocument = addDocument;\nClassifier.prototype.removeDocument = removeDocument;\nClassifier.prototype.train = train;\nif (Threads) {\n  Classifier.prototype.trainParallel = trainParallel;\n  Classifier.prototype.trainParallelBatches = trainParallelBatches;\n  Classifier.prototype.retrainParallel = retrainParallel;\n}\nClassifier.prototype.retrain = retrain;\nClassifier.prototype.classify = classify;\nClassifier.prototype.textToFeatures = textToFeatures;\nClassifier.prototype.save = save;\nClassifier.prototype.getClassifications = getClassifications;\nClassifier.prototype.setOptions = setOptions;\nClassifier.restore = restore;\nClassifier.load = load;\n\nmodule.exports = Classifier;\n"]},"metadata":{},"sourceType":"script"}