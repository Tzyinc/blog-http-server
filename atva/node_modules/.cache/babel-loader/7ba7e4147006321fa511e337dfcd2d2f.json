{"ast":null,"code":"const Preprocesser = require('./Preprocesser').Preprocesser;\n\nclass Summarizer {\n  constructor(string_to_process, number_of_sentences) {\n    this.preprocesser = new Preprocesser();\n    this.number_of_sentences = number_of_sentences;\n    this.string_to_process = string_to_process;\n    this.new_length = 0;\n  } //Takes in a list of sentences and weights and sorts by weight.\n\n\n  sortSentences(sentence_weights_list) {\n    sentence_weights_list.sort((a, b) => {\n      return b[0] - a[0];\n    });\n    return sentence_weights_list;\n  } //Converts the textRank map into a list\n\n\n  textRankMapToList(text_rank_map) {\n    let result_list = [];\n    text_rank_map.forEach((value, key, map) => {\n      result_list.push([value, key]);\n    });\n    return result_list;\n  } //Takes in a list of sorted sentences and a map of those sentences to the original sentences. \n\n\n  listToString(sorted_sentences, clean_sentences) {\n    const self = this;\n    let result_string = \"\";\n    let length_count = 0;\n    let count = self.number_of_sentences;\n\n    if (sorted_sentences.length < self.number_of_sentences) {\n      count = sorted_sentences.length;\n    }\n\n    for (var i = 0; i < count; i++) {\n      length_count += sorted_sentences[i][1].split(\" \").length;\n      result_string += clean_sentences[1].get(sorted_sentences[i][1]);\n    }\n\n    this.new_length = length_count;\n    return result_string;\n  }\n\n  summarizeByFrequency() {\n    const self = this;\n    const list_to_clean = self.preprocesser.paragraphToSentences(self.string_to_process);\n    const clean_sentences = self.preprocesser.cleanSentences(list_to_clean);\n    const tokenized = self.preprocesser.tokenizeSentences(clean_sentences[0]);\n    const weighted_map = self.preprocesser.getWeights(tokenized);\n    const sentence_weights_list = self.preprocesser.sentenceWeights(clean_sentences[0], weighted_map);\n    const sorted_sentences = self.sortSentences(sentence_weights_list);\n    return {\n      summary: self.listToString(sorted_sentences, clean_sentences),\n      sentence_list: list_to_clean,\n      weighted_map: weighted_map,\n      sorted_sentences: sorted_sentences\n    };\n  }\n\n  async summarizeByRank() {\n    const self = this;\n    const list_to_clean = self.preprocesser.paragraphToSentences(self.string_to_process);\n    const clean_sentences = self.preprocesser.cleanSentences(list_to_clean);\n\n    try {\n      const nouns_and_adjactive_map = await self.preprocesser.nounsAndAdjectives(clean_sentences[0]);\n      let text_rank_graph = self.preprocesser.createTextRankGraph(nouns_and_adjactive_map);\n      let text_rank_map = self.preprocesser.textRank(text_rank_graph);\n      let text_rank_list = self.sortSentences(self.textRankMapToList(text_rank_map)); //let list_to_pass_in = text_rank_list;\n\n      return {\n        summary: self.listToString(text_rank_list, clean_sentences),\n        sentence_list: list_to_clean,\n        nouns_and_adjactive_map: nouns_and_adjactive_map\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}\n\nmodule.exports.Summarizer = Summarizer;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/node-summarizer/src/Summarizer.js"],"names":["Preprocesser","require","Summarizer","constructor","string_to_process","number_of_sentences","preprocesser","new_length","sortSentences","sentence_weights_list","sort","a","b","textRankMapToList","text_rank_map","result_list","forEach","value","key","map","push","listToString","sorted_sentences","clean_sentences","self","result_string","length_count","count","length","i","split","get","summarizeByFrequency","list_to_clean","paragraphToSentences","cleanSentences","tokenized","tokenizeSentences","weighted_map","getWeights","sentenceWeights","summary","sentence_list","summarizeByRank","nouns_and_adjactive_map","nounsAndAdjectives","text_rank_graph","createTextRankGraph","textRank","text_rank_list","err","console","log","module","exports"],"mappings":"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","sourcesContent":["const Preprocesser = require('./Preprocesser').Preprocesser;\n\nclass Summarizer{\n\tconstructor(string_to_process, number_of_sentences){\n\t\tthis.preprocesser = new Preprocesser();\n\t\tthis.number_of_sentences = number_of_sentences;\n\t\tthis.string_to_process = string_to_process;\n\t\tthis.new_length = 0;\n\t}\n\n\t//Takes in a list of sentences and weights and sorts by weight.\n\tsortSentences(sentence_weights_list){\n\t\tsentence_weights_list.sort((a,b)=>{\n\t\t\treturn b[0]-a[0];\n\t\t})\n\t\treturn sentence_weights_list;\n\t}\n\n\t//Converts the textRank map into a list\n\ttextRankMapToList(text_rank_map){\n\t\tlet result_list = [];\n\t\ttext_rank_map.forEach((value, key, map)=>{\n\t\t\tresult_list.push([value,key]);\n\t\t})\n\n\t\treturn result_list;\n\t}\n\n\t//Takes in a list of sorted sentences and a map of those sentences to the original sentences. \n\tlistToString(sorted_sentences, clean_sentences){\n\t\tconst self = this;\n\t\tlet result_string = \"\";\n\t\tlet length_count = 0;\n\t\tlet count = self.number_of_sentences;\n\t\tif(sorted_sentences.length < self.number_of_sentences){\n\t\t\tcount = sorted_sentences.length;\n\t\t}\n\t\tfor(var i=0; i<count; i++){\n\t\t\tlength_count += sorted_sentences[i][1].split(\" \").length;\n\t\t\tresult_string+=clean_sentences[1].get(sorted_sentences[i][1]);\n\t\t}\n\t\tthis.new_length = length_count;\n\t\treturn result_string;\n\t}\n\n\tsummarizeByFrequency(){\n\t\tconst self = this\n\t\tconst list_to_clean = self.preprocesser.paragraphToSentences(self.string_to_process);\n\t\tconst clean_sentences = self.preprocesser.cleanSentences(list_to_clean);\n\t\tconst tokenized = self.preprocesser.tokenizeSentences(clean_sentences[0]);\n\t\tconst weighted_map = self.preprocesser.getWeights(tokenized);\n\t\tconst sentence_weights_list = self.preprocesser.sentenceWeights(clean_sentences[0], weighted_map);\n\t\tconst sorted_sentences = self.sortSentences(sentence_weights_list);\n\t\t\n\t\treturn {\n\t\t\tsummary: self.listToString(sorted_sentences, clean_sentences),\n\t\t\tsentence_list: list_to_clean,\n\t\t\tweighted_map: weighted_map,\n\t\t\tsorted_sentences: sorted_sentences\n\t\t}\n\t}\n\n\tasync summarizeByRank(){\n\t\tconst self = this;\n\t\tconst list_to_clean = self.preprocesser.paragraphToSentences(self.string_to_process);\n\t\tconst clean_sentences = self.preprocesser.cleanSentences(list_to_clean);\n\t\ttry{\n\t\t\tconst nouns_and_adjactive_map = await self.preprocesser.nounsAndAdjectives(clean_sentences[0]);\n\t\t\tlet text_rank_graph = self.preprocesser.createTextRankGraph(nouns_and_adjactive_map);\n\t\t\tlet text_rank_map = self.preprocesser.textRank(text_rank_graph);\n\t\t\tlet text_rank_list = self.sortSentences(self.textRankMapToList(text_rank_map));\n\t\t\t//let list_to_pass_in = text_rank_list;\n\t\t\treturn {\n\t\t\t\tsummary: self.listToString(text_rank_list, clean_sentences),\n\t\t\t\tsentence_list: list_to_clean,\n\t\t\t\tnouns_and_adjactive_map: nouns_and_adjactive_map\n\t\t\t}\n\t\t}catch(err){\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n}\n\nmodule.exports.Summarizer = Summarizer;"]},"metadata":{},"sourceType":"script"}