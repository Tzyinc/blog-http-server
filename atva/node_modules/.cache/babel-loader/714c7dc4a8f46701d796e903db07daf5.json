{"ast":null,"code":"var Trie = require('../trie/trie'); // Probabilistic spellchecker based on http://norvig.com/spell-correct.html\n// The general idea is simple. Given a word, the spellchecker calculates all strings that are some user-defined edit distance away. Of those many candidates, it filters the ones that are not words and then returns an array of possible corrections in order of decreasing probability, based on the edit distance and the candidate's frequency in the input corpus\n// Words that are an edit distance of n away from the mispelled word are considered infinitely more probable than words that are of an edit distance >n\n// wordlist is a corpus (an array) from which word probabilities are calculated (so something like /usr/share/dict/words (on OSX) will work okay, but real world text will work better)\n\n\nfunction Spellcheck(wordlist) {\n  this.trie = new Trie();\n  this.trie.addStrings(wordlist);\n  this.word2frequency = {};\n\n  for (var i in wordlist) {\n    if (!this.word2frequency[wordlist[i]]) {\n      this.word2frequency[wordlist[i]] = 0;\n    }\n\n    this.word2frequency[wordlist[i]]++;\n  }\n}\n\nSpellcheck.prototype.isCorrect = function (word) {\n  return this.trie.contains(word);\n}; // Returns a list of suggested corrections, from highest to lowest probability \n// maxDistance is the maximum edit distance \n// According to Norvig, literature suggests that 80% to 95% of spelling errors are an edit distance of 1 away from the correct word. This is good, because there are roughly 54n+25 strings 1 edit distance away from any given string of length n. So after maxDistance = 2, this becomes very slow.\n\n\nSpellcheck.prototype.getCorrections = function (word, maxDistance) {\n  var self = this;\n  if (!maxDistance) maxDistance = 1;\n  var edits = this.editsWithMaxDistance(word, maxDistance);\n  edits = edits.slice(1, edits.length);\n  edits = edits.map(function (editList) {\n    return editList.filter(function (word) {\n      return self.isCorrect(word);\n    }).map(function (word) {\n      return [word, self.word2frequency[word]];\n    }).sort(function (a, b) {\n      return a[1] > b[1] ? -1 : 1;\n    }).map(function (wordscore) {\n      return wordscore[0];\n    });\n  });\n  var flattened = [];\n\n  for (var i in edits) {\n    if (edits[i].length) flattened = flattened.concat(edits[i]);\n  }\n\n  return flattened.filter(function (v, i, a) {\n    return a.indexOf(v) == i;\n  });\n}; // Returns all edits that are 1 edit-distance away from the input word\n\n\nSpellcheck.prototype.edits = function (word) {\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var edits = [];\n\n  for (var i = 0; i < word.length + 1; i++) {\n    if (i > 0) edits.push(word.slice(0, i - 1) + word.slice(i, word.length)); // deletes\n\n    if (i > 0 && i < word.length + 1) edits.push(word.slice(0, i - 1) + word.slice(i, i + 1) + word.slice(i - 1, i) + word.slice(i + 1, word.length)); // transposes\n\n    for (var k = 0; k < alphabet.length; k++) {\n      if (i > 0) edits.push(word.slice(0, i - 1) + alphabet[k] + word.slice(i, word.length)); // replaces\n\n      edits.push(word.slice(0, i) + alphabet[k] + word.slice(i, word.length)); // inserts\n    }\n  } // Deduplicate edits\n\n\n  edits = edits.filter(function (v, i, a) {\n    return a.indexOf(v) == i;\n  });\n  return edits;\n}; // Returns all edits that are up to \"distance\" edit distance away from the input word\n\n\nSpellcheck.prototype.editsWithMaxDistance = function (word, distance) {\n  return this.editsWithMaxDistanceHelper(distance, [[word]]);\n};\n\nSpellcheck.prototype.editsWithMaxDistanceHelper = function (distanceCounter, distance2edits) {\n  if (distanceCounter == 0) return distance2edits;\n  var currentDepth = distance2edits.length - 1;\n  var words = distance2edits[currentDepth];\n  var edits = this.edits(words[0]);\n  distance2edits[currentDepth + 1] = [];\n\n  for (var i in words) {\n    distance2edits[currentDepth + 1] = distance2edits[currentDepth + 1].concat(this.edits(words[i]));\n  }\n\n  return this.editsWithMaxDistanceHelper(distanceCounter - 1, distance2edits);\n};\n\nmodule.exports = Spellcheck;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/spellcheck/spellcheck.js"],"names":["Trie","require","Spellcheck","wordlist","trie","addStrings","word2frequency","i","prototype","isCorrect","word","contains","getCorrections","maxDistance","self","edits","editsWithMaxDistance","slice","length","map","editList","filter","sort","a","b","wordscore","flattened","concat","v","indexOf","alphabet","push","k","distance","editsWithMaxDistanceHelper","distanceCounter","distance2edits","currentDepth","words","module","exports"],"mappings":"AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAAlB,C,CAEA;AACA;AACA;AAEA;;;AACA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,OAAKC,IAAL,GAAY,IAAIJ,IAAJ,EAAZ;AACA,OAAKI,IAAL,CAAUC,UAAV,CAAqBF,QAArB;AACA,OAAKG,cAAL,GAAsB,EAAtB;;AACA,OAAI,IAAIC,CAAR,IAAaJ,QAAb,EAAuB;AACnB,QAAG,CAAC,KAAKG,cAAL,CAAoBH,QAAQ,CAACI,CAAD,CAA5B,CAAJ,EAAsC;AAClC,WAAKD,cAAL,CAAoBH,QAAQ,CAACI,CAAD,CAA5B,IAAmC,CAAnC;AACH;;AACD,SAAKD,cAAL,CAAoBH,QAAQ,CAACI,CAAD,CAA5B;AACH;AACJ;;AAEDL,UAAU,CAACM,SAAX,CAAqBC,SAArB,GAAiC,UAASC,IAAT,EAAe;AAC5C,SAAO,KAAKN,IAAL,CAAUO,QAAV,CAAmBD,IAAnB,CAAP;AACH,CAFD,C,CAIA;AACA;AACA;;;AACAR,UAAU,CAACM,SAAX,CAAqBI,cAArB,GAAsC,UAASF,IAAT,EAAeG,WAAf,EAA4B;AAC9D,MAAIC,IAAI,GAAG,IAAX;AACA,MAAG,CAACD,WAAJ,EAAiBA,WAAW,GAAG,CAAd;AACjB,MAAIE,KAAK,GAAG,KAAKC,oBAAL,CAA0BN,IAA1B,EAAgCG,WAAhC,CAAZ;AACAE,EAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAcF,KAAK,CAACG,MAApB,CAAR;AACAH,EAAAA,KAAK,GAAGA,KAAK,CAACI,GAAN,CAAU,UAASC,QAAT,EAAmB;AAClC,WAAOA,QAAQ,CAACC,MAAT,CAAgB,UAASX,IAAT,EAAe;AAAE,aAAOI,IAAI,CAACL,SAAL,CAAeC,IAAf,CAAP;AAA8B,KAA/D,EACSS,GADT,CACa,UAAST,IAAT,EAAe;AAAE,aAAO,CAACA,IAAD,EAAOI,IAAI,CAACR,cAAL,CAAoBI,IAApB,CAAP,CAAP;AAA2C,KADzE,EAESY,IAFT,CAEc,UAASC,CAAT,EAAWC,CAAX,EAAc;AAAE,aAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,CAAC,CAAf,GAAmB,CAA1B;AAA8B,KAF5D,EAGSL,GAHT,CAGa,UAASM,SAAT,EAAoB;AAAE,aAAOA,SAAS,CAAC,CAAD,CAAhB;AAAsB,KAHzD,CAAP;AAIF,GALO,CAAR;AAMA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAInB,CAAR,IAAaQ,KAAb,EAAoB;AAChB,QAAGA,KAAK,CAACR,CAAD,CAAL,CAASW,MAAZ,EAAoBQ,SAAS,GAAGA,SAAS,CAACC,MAAV,CAAiBZ,KAAK,CAACR,CAAD,CAAtB,CAAZ;AACvB;;AACD,SAAOmB,SAAS,CAACL,MAAV,CAAiB,UAAUO,CAAV,EAAarB,CAAb,EAAgBgB,CAAhB,EAAmB;AAAE,WAAOA,CAAC,CAACM,OAAF,CAAUD,CAAV,KAAgBrB,CAAvB;AAA0B,GAAhE,CAAP;AACH,CAhBD,C,CAkBA;;;AACAL,UAAU,CAACM,SAAX,CAAqBO,KAArB,GAA6B,UAASL,IAAT,EAAe;AACxC,MAAIoB,QAAQ,GAAG,4BAAf;AACA,MAAIf,KAAK,GAAG,EAAZ;;AACA,OAAI,IAAIR,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACG,IAAI,CAACQ,MAAL,GAAY,CAA3B,EAA8BX,CAAC,EAA/B,EAAmC;AAC/B,QAAGA,CAAC,GAAC,CAAL,EAAQQ,KAAK,CAACgB,IAAN,CAAWrB,IAAI,CAACO,KAAL,CAAW,CAAX,EAAaV,CAAC,GAAC,CAAf,IAAkBG,IAAI,CAACO,KAAL,CAAWV,CAAX,EAAaG,IAAI,CAACQ,MAAlB,CAA7B,EADuB,CACkC;;AACjE,QAAGX,CAAC,GAAC,CAAF,IAAOA,CAAC,GAACG,IAAI,CAACQ,MAAL,GAAY,CAAxB,EAA2BH,KAAK,CAACgB,IAAN,CAAWrB,IAAI,CAACO,KAAL,CAAW,CAAX,EAAaV,CAAC,GAAC,CAAf,IAAoBG,IAAI,CAACO,KAAL,CAAWV,CAAX,EAAaA,CAAC,GAAC,CAAf,CAApB,GAAwCG,IAAI,CAACO,KAAL,CAAWV,CAAC,GAAC,CAAb,EAAgBA,CAAhB,CAAxC,GAA6DG,IAAI,CAACO,KAAL,CAAWV,CAAC,GAAC,CAAb,EAAeG,IAAI,CAACQ,MAApB,CAAxE,EAFI,CAEkG;;AACjI,SAAI,IAAIc,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,QAAQ,CAACZ,MAAxB,EAAgCc,CAAC,EAAjC,EAAqC;AACjC,UAAGzB,CAAC,GAAC,CAAL,EAAQQ,KAAK,CAACgB,IAAN,CAAWrB,IAAI,CAACO,KAAL,CAAW,CAAX,EAAaV,CAAC,GAAC,CAAf,IAAkBuB,QAAQ,CAACE,CAAD,CAA1B,GAA8BtB,IAAI,CAACO,KAAL,CAAWV,CAAX,EAAaG,IAAI,CAACQ,MAAlB,CAAzC,EADyB,CAC4C;;AAC7EH,MAAAA,KAAK,CAACgB,IAAN,CAAWrB,IAAI,CAACO,KAAL,CAAW,CAAX,EAAaV,CAAb,IAAgBuB,QAAQ,CAACE,CAAD,CAAxB,GAA4BtB,IAAI,CAACO,KAAL,CAAWV,CAAX,EAAaG,IAAI,CAACQ,MAAlB,CAAvC,EAFiC,CAEkC;AACtE;AACJ,GAVuC,CAWxC;;;AACAH,EAAAA,KAAK,GAAGA,KAAK,CAACM,MAAN,CAAa,UAAUO,CAAV,EAAarB,CAAb,EAAgBgB,CAAhB,EAAmB;AAAE,WAAOA,CAAC,CAACM,OAAF,CAAUD,CAAV,KAAgBrB,CAAvB;AAA0B,GAA5D,CAAR;AACA,SAAOQ,KAAP;AACH,CAdD,C,CAgBA;;;AACAb,UAAU,CAACM,SAAX,CAAqBQ,oBAArB,GAA4C,UAASN,IAAT,EAAeuB,QAAf,EAAyB;AACjE,SAAO,KAAKC,0BAAL,CAAgCD,QAAhC,EAA0C,CAAC,CAACvB,IAAD,CAAD,CAA1C,CAAP;AACH,CAFD;;AAIAR,UAAU,CAACM,SAAX,CAAqB0B,0BAArB,GAAkD,UAASC,eAAT,EAA0BC,cAA1B,EAA0C;AACxF,MAAGD,eAAe,IAAI,CAAtB,EAAyB,OAAOC,cAAP;AACzB,MAAIC,YAAY,GAAGD,cAAc,CAAClB,MAAf,GAAsB,CAAzC;AACA,MAAIoB,KAAK,GAAGF,cAAc,CAACC,YAAD,CAA1B;AACA,MAAItB,KAAK,GAAG,KAAKA,KAAL,CAAWuB,KAAK,CAAC,CAAD,CAAhB,CAAZ;AACAF,EAAAA,cAAc,CAACC,YAAY,GAAC,CAAd,CAAd,GAAiC,EAAjC;;AACA,OAAI,IAAI9B,CAAR,IAAa+B,KAAb,EAAoB;AAChBF,IAAAA,cAAc,CAACC,YAAY,GAAC,CAAd,CAAd,GAAiCD,cAAc,CAACC,YAAY,GAAC,CAAd,CAAd,CAA+BV,MAA/B,CAAsC,KAAKZ,KAAL,CAAWuB,KAAK,CAAC/B,CAAD,CAAhB,CAAtC,CAAjC;AACH;;AACD,SAAO,KAAK2B,0BAAL,CAAgCC,eAAe,GAAC,CAAhD,EAAmDC,cAAnD,CAAP;AACH,CAVD;;AAYAG,MAAM,CAACC,OAAP,GAAiBtC,UAAjB","sourcesContent":["\nvar Trie = require('../trie/trie');\n\n// Probabilistic spellchecker based on http://norvig.com/spell-correct.html\n// The general idea is simple. Given a word, the spellchecker calculates all strings that are some user-defined edit distance away. Of those many candidates, it filters the ones that are not words and then returns an array of possible corrections in order of decreasing probability, based on the edit distance and the candidate's frequency in the input corpus\n// Words that are an edit distance of n away from the mispelled word are considered infinitely more probable than words that are of an edit distance >n\n\n// wordlist is a corpus (an array) from which word probabilities are calculated (so something like /usr/share/dict/words (on OSX) will work okay, but real world text will work better)\nfunction Spellcheck(wordlist) {\n    this.trie = new Trie();\n    this.trie.addStrings(wordlist);\n    this.word2frequency = {};\n    for(var i in wordlist) {\n        if(!this.word2frequency[wordlist[i]]) {\n            this.word2frequency[wordlist[i]] = 0;\n        }\n        this.word2frequency[wordlist[i]]++;\n    }\n}\n\nSpellcheck.prototype.isCorrect = function(word) {\n    return this.trie.contains(word);\n}\n\n// Returns a list of suggested corrections, from highest to lowest probability \n// maxDistance is the maximum edit distance \n// According to Norvig, literature suggests that 80% to 95% of spelling errors are an edit distance of 1 away from the correct word. This is good, because there are roughly 54n+25 strings 1 edit distance away from any given string of length n. So after maxDistance = 2, this becomes very slow.\nSpellcheck.prototype.getCorrections = function(word, maxDistance) {\n    var self = this;\n    if(!maxDistance) maxDistance = 1;\n    var edits = this.editsWithMaxDistance(word, maxDistance);\n    edits = edits.slice(1,edits.length);\n    edits = edits.map(function(editList) {\n       return editList.filter(function(word) { return self.isCorrect(word); })\n                      .map(function(word) { return [word, self.word2frequency[word]]; })\n                      .sort(function(a,b) { return a[1] > b[1] ? -1 : 1; })\n                      .map(function(wordscore) { return wordscore[0]; });\n    });\n    var flattened = [];\n    for(var i in edits) {\n        if(edits[i].length) flattened = flattened.concat(edits[i]);\n    }\n    return flattened.filter(function (v, i, a) { return a.indexOf(v) == i });\n}\n\n// Returns all edits that are 1 edit-distance away from the input word\nSpellcheck.prototype.edits = function(word) {\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var edits = [];\n    for(var i=0; i<word.length+1; i++) {\n        if(i>0) edits.push(word.slice(0,i-1)+word.slice(i,word.length)); // deletes\n        if(i>0 && i<word.length+1) edits.push(word.slice(0,i-1) + word.slice(i,i+1) + word.slice(i-1, i) + word.slice(i+1,word.length)); // transposes\n        for(var k=0; k<alphabet.length; k++) {\n            if(i>0) edits.push(word.slice(0,i-1)+alphabet[k]+word.slice(i,word.length)); // replaces\n            edits.push(word.slice(0,i)+alphabet[k]+word.slice(i,word.length)); // inserts\n        }\n    }\n    // Deduplicate edits\n    edits = edits.filter(function (v, i, a) { return a.indexOf(v) == i });\n    return edits;\n}\n\n// Returns all edits that are up to \"distance\" edit distance away from the input word\nSpellcheck.prototype.editsWithMaxDistance = function(word, distance) { \n    return this.editsWithMaxDistanceHelper(distance, [[word]]);\n}\n\nSpellcheck.prototype.editsWithMaxDistanceHelper = function(distanceCounter, distance2edits) {\n    if(distanceCounter == 0) return distance2edits;\n    var currentDepth = distance2edits.length-1;\n    var words = distance2edits[currentDepth];\n    var edits = this.edits(words[0]);\n    distance2edits[currentDepth+1] = [];\n    for(var i in words) {\n        distance2edits[currentDepth+1] = distance2edits[currentDepth+1].concat(this.edits(words[i]));\n    }\n    return this.editsWithMaxDistanceHelper(distanceCounter-1, distance2edits);\n}\n\nmodule.exports = Spellcheck;\n"]},"metadata":{},"sourceType":"script"}