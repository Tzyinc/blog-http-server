{"ast":null,"code":"/*\n    Feature class for features that fire (or don't) on combinations of context\n    and class\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nfunction Feature(f, name, parameters) {\n  this.evaluate = f;\n  this.name = name;\n  this.parameters = parameters;\n  var tmp = \"\";\n  parameters.forEach(function (par) {\n    tmp += par + \"|\";\n  });\n  this.parametersKey = tmp.substr(0, tmp.length - 1);\n}\n\nFeature.prototype.apply = function (x) {\n  return this.evaluate(x);\n};\n\nFeature.prototype.expectationApprox = function (p, sample) {\n  var totalSum = 0;\n  var that = this;\n  var sum = 0;\n  var seen = {};\n  var A = sample.getClasses();\n  sample.elements.forEach(function (sampleElement) {\n    var b_i = sampleElement.b;\n\n    if (!seen[b_i.toString()]) {\n      seen[b_i.toString()] = true;\n\n      var Element = require('./Element');\n\n      A.forEach(function (a) {\n        var x = new Element(a, b_i);\n        sum += sample.observedProbabilityOfContext(b_i) * p.calculateAPosteriori(x) * that.apply(x);\n      });\n    }\n  });\n  return sum;\n}; // Diect calculation of expected value of this feature according to distribution p\n// In real-life applications with a lot of features this is not tractable\n\n\nFeature.prototype.expectation = function (p, A, B) {\n  var sum = 0;\n  var that = this;\n  A.forEach(function (a) {\n    B.forEach(function (b) {\n      var x = new Element(a, b);\n      sum += p.calculateAPriori(x) * that.apply(x);\n    });\n  });\n  return sum;\n}; // Observed expectation of this feature in the sample\n\n\nFeature.prototype.observedExpectation = function (sample) {\n  if (this.observedExpect) {\n    return this.observedExpect;\n  }\n\n  var N = sample.size();\n  var sum = 0;\n  var that = this;\n  sample.elements.forEach(function (x) {\n    sum += that.apply(x);\n  });\n  this.observedExpect = sum / N;\n  return this.observedExpect;\n};\n\nmodule.exports = Feature;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/classifiers/maxent/Feature.js"],"names":["Feature","f","name","parameters","evaluate","tmp","forEach","par","parametersKey","substr","length","prototype","apply","x","expectationApprox","p","sample","totalSum","that","sum","seen","A","getClasses","elements","sampleElement","b_i","b","toString","Element","require","a","observedProbabilityOfContext","calculateAPosteriori","expectation","B","calculateAPriori","observedExpectation","observedExpect","N","size","module","exports"],"mappings":"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","sourcesContent":["/*\n    Feature class for features that fire (or don't) on combinations of context\n    and class\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nfunction Feature(f, name, parameters) {\n  this.evaluate = f;\n  this.name = name;\n  this.parameters = parameters;\n\n  var tmp = \"\";\n  parameters.forEach(function(par) {\n    tmp += par + \"|\";\n  });\n  this.parametersKey = tmp.substr(0, tmp.length - 1);\n}\n\nFeature.prototype.apply = function(x) {\n  return this.evaluate(x);\n};\n\nFeature.prototype.expectationApprox = function(p, sample) {\n  var totalSum = 0;\n  var that = this;\n  var sum = 0;\n  var seen = {};\n  var A = sample.getClasses();\n  sample.elements.forEach(function(sampleElement) {\n    var b_i = sampleElement.b;\n\n    if (!seen[b_i.toString()]) {\n      seen[b_i.toString()] = true;\n      var Element = require('./Element');\n\n      A.forEach(function(a) {\n        var x = new Element(a, b_i);\n        sum += sample.observedProbabilityOfContext(b_i) * p.calculateAPosteriori(x) * that.apply(x);\n      });\n    }\n  });\n  return sum;\n};\n\n// Diect calculation of expected value of this feature according to distribution p\n// In real-life applications with a lot of features this is not tractable\nFeature.prototype.expectation = function(p, A, B) {\n  var sum = 0;\n  var that = this;\n  A.forEach(function(a) {\n    B.forEach(function(b) {\n        var x = new Element(a, b);\n        sum += (p.calculateAPriori(x) * that.apply(x));\n    });\n  });\n  return sum;\n};\n\n// Observed expectation of this feature in the sample\nFeature.prototype.observedExpectation = function(sample) {\n  if (this.observedExpect) {\n    return this.observedExpect;\n  }\n  var N = sample.size();\n  var sum = 0;\n  var that = this;\n  sample.elements.forEach(function(x) {\n    sum += that.apply(x);\n  });\n  this.observedExpect = sum / N;\n  return this.observedExpect;\n};\n\nmodule.exports = Feature;\n"]},"metadata":{},"sourceType":"script"}