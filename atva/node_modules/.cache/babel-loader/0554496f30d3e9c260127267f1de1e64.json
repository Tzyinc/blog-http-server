{"ast":null,"code":"const Summarizer = require('./Summarizer').Summarizer;\n\nconst natural = require(\"natural\");\n\nclass SummarizerManager {\n  constructor(string, number_of_sentences) {\n    this.string = string;\n    this.number_of_sentences = number_of_sentences;\n    this.rank_summary = \"\";\n    this.frequency_summary = \"\";\n  }\n\n  getSentiment() {\n    let self = this;\n\n    let Analyzer = require('natural').SentimentAnalyzer;\n\n    let stemmer = require('natural').PorterStemmer;\n\n    let analyzer = new Analyzer(\"English\", stemmer, \"afinn\");\n    return analyzer.getSentiment(self.string.split(\" \"));\n  }\n\n  getFrequencyReduction() {\n    if (this.frequency_summary == \"\") {\n      this.frequency_summary = this.getSummaryByFrequency().summary;\n    }\n\n    let dec = 1 - this.frequency_summary.length / this.string.length;\n    let string_dec = String(dec);\n    return {\n      reduction: string_dec.slice(2, 4) + \".\" + string_dec.slice(4, 5) + \"%\",\n      summary: this.frequency_summary\n    };\n  }\n\n  async getRankReduction() {\n    if (this.rank_summary == \"\") {\n      await this.getSummaryByRank();\n    }\n\n    let dec = 1 - this.rank_summary.length / this.string.length;\n    let string_dec = String(dec);\n    return {\n      reduction: string_dec.slice(2, 4) + \".\" + string_dec.slice(4, 5) + \"%\",\n      summary: this.rank_summary\n    };\n  }\n\n  async getRankReductionAsDec() {\n    if (this.rank_summary == \"\") {\n      await this.getSummaryByRank();\n    }\n\n    let dec = 1 - this.rank_summary.length / this.string.length;\n    return {\n      dec_reduction: dec,\n      summary: this.rank_summary\n    };\n  }\n\n  getFrequencyReductionAsDec() {\n    if (this.frequency_summary == \"\") {\n      this.frequency_summary = this.getSummaryByFrequency().summary;\n    }\n\n    let dec = 1 - this.frequency_summary.length / this.string.length;\n    return {\n      dec_reduction: dec,\n      summary: this.frequency_summary\n    };\n  }\n\n  getSummaryByFrequency() {\n    try {\n      let summarizer = new Summarizer(this.string, this.number_of_sentences);\n      const summary_obj = summarizer.summarizeByFrequency();\n      this.frequency_summary = summary_obj.summary;\n\n      if (summary_obj.summary == '') {\n        summary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"), summary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\");\n      }\n\n      return summary_obj;\n    } catch (err) {\n      return Error(\"An invalid sentence was entered\");\n    }\n  }\n\n  async getSummaryByRank() {\n    try {\n      let summarizer = new Summarizer(this.string, this.number_of_sentences);\n      const summary_obj = await summarizer.summarizeByRank();\n\n      if (typeof summary_obj.summary === 'undefined' || summary_obj.summary == '') {\n        summary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"), summary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\");\n      }\n\n      this.rank_summary = summary_obj.summary;\n      return summary_obj;\n    } catch (err) {\n      return Error(\"An invalid sentence was entered\");\n    }\n  }\n\n}\n\nmodule.exports = SummarizerManager;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/node-summarizer/src/SummarizerManager.js"],"names":["Summarizer","require","natural","SummarizerManager","constructor","string","number_of_sentences","rank_summary","frequency_summary","getSentiment","self","Analyzer","SentimentAnalyzer","stemmer","PorterStemmer","analyzer","split","getFrequencyReduction","getSummaryByFrequency","summary","dec","length","string_dec","String","reduction","slice","getRankReduction","getSummaryByRank","getRankReductionAsDec","dec_reduction","getFrequencyReductionAsDec","summarizer","summary_obj","summarizeByFrequency","Error","sentence_list","err","summarizeByRank","module","exports"],"mappings":"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","sourcesContent":["const Summarizer = require('./Summarizer').Summarizer;\nconst natural = require(\"natural\");\n\nclass SummarizerManager{\n\tconstructor(string, number_of_sentences){\n\t\tthis.string = string;\n\t\tthis.number_of_sentences = number_of_sentences;\n\t\tthis.rank_summary = \"\";\n\t\tthis.frequency_summary = \"\";\n\t}\n\n\tgetSentiment(){\n\t\tlet self = this;\n\t\tlet Analyzer = require('natural').SentimentAnalyzer;\n\t\tlet stemmer = require('natural').PorterStemmer;\n\t\tlet analyzer = new Analyzer(\"English\", stemmer, \"afinn\");\n\t\treturn analyzer.getSentiment(self.string.split(\" \"));\n\t\t\n\t}\n\tgetFrequencyReduction(){\n\t\tif (this.frequency_summary == \"\"){\n\t\t\tthis.frequency_summary = this.getSummaryByFrequency().summary;\n\t\t}\n\t\tlet dec = 1-(this.frequency_summary.length/this.string.length);\n\t\tlet string_dec = String(dec);\n\t\treturn {\n\t\t\treduction: string_dec.slice(2,4)+\".\"+string_dec.slice(4,5)+\"%\",\n\t\t\tsummary: this.frequency_summary\n\t\t};\n\t}\n\n\tasync getRankReduction(){\n\t\tif (this.rank_summary == \"\"){\n\t\t\tawait this.getSummaryByRank();\t\n\t\t}\n\t\tlet dec = 1-(this.rank_summary.length/this.string.length);\n\t\tlet string_dec = String(dec);\n\t\treturn {\n\t\t\treduction: string_dec.slice(2,4)+\".\"+string_dec.slice(4,5)+\"%\",\n\t\t\tsummary: this.rank_summary\n\t\t}\n\n\t}\n\n\tasync getRankReductionAsDec(){\n\t\tif (this.rank_summary == \"\"){\n\t\t\tawait this.getSummaryByRank();\n\t\t}\n\t\tlet dec = 1-(this.rank_summary.length/this.string.length);\n\t\treturn {\n\t\t\tdec_reduction: dec,\n\t\t\tsummary: this.rank_summary\n\t\t}\n\t}\n\n\tgetFrequencyReductionAsDec(){\n\t\tif (this.frequency_summary == \"\"){\n\t\t\tthis.frequency_summary = this.getSummaryByFrequency().summary;\n\t\t}\n\t\tlet dec = 1-(this.frequency_summary.length/this.string.length);\n\t\treturn {\n\t\t\tdec_reduction: dec,\n\t\t\tsummary: this.frequency_summary\n\t\t}\n\t}\n\n\tgetSummaryByFrequency(){\n\t\ttry{\n\t\t\tlet summarizer = new Summarizer(this.string, this.number_of_sentences);\n\t\t\tconst summary_obj = summarizer.summarizeByFrequency();\n\t\t\tthis.frequency_summary = summary_obj.summary;\n\t\t\tif(summary_obj.summary == ''){\n\t\t\t\tsummary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"),\n\t\t\t\tsummary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\")\n\t\t\t}\n\t\t\treturn summary_obj;\n\t\t}catch(err){\n\t\t\treturn Error(\"An invalid sentence was entered\");\n\t\t}\n\n\t}\n\n\tasync getSummaryByRank(){\n\t\ttry{\n\t\t\tlet summarizer = new Summarizer(this.string, this.number_of_sentences);\n\t\t\tconst summary_obj = await summarizer.summarizeByRank();\n\t\t\tif(typeof(summary_obj.summary) === 'undefined' || summary_obj.summary == ''){\n\t\t\t\tsummary_obj.summary = Error(\"Not Enough similarities to be summarized, or the sentence is invalid.\"),\n\t\t\t\tsummary_obj.sentence_list = Error(\"Not enough similarities to be summarized, or the sentence is invalid.\")\n\t\t\t}\n\t\t\tthis.rank_summary = summary_obj.summary;\n\t\t\treturn summary_obj;\n\t\t}catch(err){\n\t\t\treturn Error(\"An invalid sentence was entered\");\n\t\t}\n\t}\n}\n\nmodule.exports = SummarizerManager;"]},"metadata":{},"sourceType":"script"}