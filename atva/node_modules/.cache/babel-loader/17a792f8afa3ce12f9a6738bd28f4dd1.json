{"ast":null,"code":"var _createClass = require(\"/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar Vertex = function Vertex(value) {\n  \"use strict\";\n\n  _classCallCheck(this, Vertex);\n\n  this.value = value;\n  this.adjacent = new Map();\n};\n\nvar WeightedGraph =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function WeightedGraph() {\n    _classCallCheck(this, WeightedGraph);\n\n    this.vertices_map = new Map();\n    this.size = 0;\n  }\n\n  _createClass(WeightedGraph, [{\n    key: \"addVertex\",\n    value: function addVertex(value) {\n      this.size += 1;\n      var vertex_to_add = new Vertex(value);\n      this.vertices_map.set(value, vertex_to_add);\n      return vertex_to_add;\n    }\n  }, {\n    key: \"getVertex\",\n    value: function getVertex(value) {\n      if (this.vertices_map.has(value)) {\n        return this.vertices_map.get(value);\n      }\n\n      return;\n    }\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(a, b, weight) {\n      if (!this.vertices_map.has(a)) {\n        this.addVertex(a);\n      }\n\n      if (!this.vertices_map.has(b)) {\n        this.addVertex(b);\n      }\n\n      this.vertices_map.get(a).adjacent.set(b, weight);\n      this.vertices_map.get(b).adjacent.set(a, weight);\n    }\n  }, {\n    key: \"getAllVertices\",\n    value: function getAllVertices() {\n      var result_list = [];\n      this.vertices_map.forEach(function (value, key, map) {\n        result_list.push(key);\n      });\n      return result_list;\n    }\n  }]);\n\n  return WeightedGraph;\n}();\n\nmodule.exports.WeightedGraph = WeightedGraph;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/node-summarizer/src/WeightedGraph.js"],"names":["Vertex","value","adjacent","Map","WeightedGraph","vertices_map","size","vertex_to_add","set","has","get","a","b","weight","addVertex","result_list","forEach","key","map","push","module","exports"],"mappings":";;;;IAAMA,M,GACL,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACjB,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA,C;;IAGIC,a;;;;;AACL,2BAAa;AAAA;;AACZ,SAAKC,YAAL,GAAoB,IAAIF,GAAJ,EAApB;AACA,SAAKG,IAAL,GAAY,CAAZ;AACA;;;;8BAESL,K,EAAM;AACf,WAAKK,IAAL,IAAW,CAAX;AACA,UAAIC,aAAa,GAAG,IAAIP,MAAJ,CAAWC,KAAX,CAApB;AACA,WAAKI,YAAL,CAAkBG,GAAlB,CAAsBP,KAAtB,EAA6BM,aAA7B;AACA,aAAOA,aAAP;AACA;;;8BAESN,K,EAAM;AACf,UAAI,KAAKI,YAAL,CAAkBI,GAAlB,CAAsBR,KAAtB,CAAJ,EAAiC;AAChC,eAAO,KAAKI,YAAL,CAAkBK,GAAlB,CAAsBT,KAAtB,CAAP;AACA;;AACD;AACA;;;4BAEOU,C,EAAGC,C,EAAGC,M,EAAO;AACpB,UAAI,CAAC,KAAKR,YAAL,CAAkBI,GAAlB,CAAsBE,CAAtB,CAAL,EAA8B;AAC7B,aAAKG,SAAL,CAAeH,CAAf;AACA;;AACD,UAAI,CAAC,KAAKN,YAAL,CAAkBI,GAAlB,CAAsBG,CAAtB,CAAL,EAA8B;AAC7B,aAAKE,SAAL,CAAeF,CAAf;AACA;;AACD,WAAKP,YAAL,CAAkBK,GAAlB,CAAsBC,CAAtB,EAAyBT,QAAzB,CAAkCM,GAAlC,CAAsCI,CAAtC,EAAyCC,MAAzC;AACA,WAAKR,YAAL,CAAkBK,GAAlB,CAAsBE,CAAtB,EAAyBV,QAAzB,CAAkCM,GAAlC,CAAsCG,CAAtC,EAAyCE,MAAzC;AACA;;;qCAEe;AACf,UAAIE,WAAW,GAAG,EAAlB;AACA,WAAKV,YAAL,CAAkBW,OAAlB,CAA0B,UAACf,KAAD,EAAQgB,GAAR,EAAaC,GAAb,EAAmB;AAC5CH,QAAAA,WAAW,CAACI,IAAZ,CAAiBF,GAAjB;AACA,OAFD;AAGA,aAAOF,WAAP;AACA;;;;;;AAGFK,MAAM,CAACC,OAAP,CAAejB,aAAf,GAA+BA,aAA/B","sourcesContent":["class Vertex{\n\tconstructor(value){\n\t\tthis.value = value;\n\t\tthis.adjacent = new Map();\n\t}\n}\n\nclass WeightedGraph{\n\tconstructor(){\n\t\tthis.vertices_map = new Map();\n\t\tthis.size = 0;\n\t}\n\n\taddVertex(value){\n\t\tthis.size+=1;\n\t\tlet vertex_to_add = new Vertex(value);\n\t\tthis.vertices_map.set(value, vertex_to_add);\n\t\treturn vertex_to_add;\n\t}\n\n\tgetVertex(value){\n\t\tif (this.vertices_map.has(value)){\n\t\t\treturn this.vertices_map.get(value);\n\t\t}\n\t\treturn \n\t}\n\n\taddEdge(a, b, weight){\n\t\tif (!this.vertices_map.has(a)){\n\t\t\tthis.addVertex(a);\n\t\t}\n\t\tif (!this.vertices_map.has(b)){\n\t\t\tthis.addVertex(b);\n\t\t}\n\t\tthis.vertices_map.get(a).adjacent.set(b, weight);\n\t\tthis.vertices_map.get(b).adjacent.set(a, weight);\n\t}\n\n\tgetAllVertices(){\n\t\tlet result_list = []\n\t\tthis.vertices_map.forEach((value, key, map)=>{\n\t\t\tresult_list.push(key);\n\t\t})\n\t\treturn result_list;\n\t}\n}\n\nmodule.exports.WeightedGraph = WeightedGraph;"]},"metadata":{},"sourceType":"script"}