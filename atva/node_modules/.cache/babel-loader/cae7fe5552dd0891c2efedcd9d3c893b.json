{"ast":null,"code":"/*\n   Set of transformation rules\n   Copyright (C) 2017 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar fs = require(\"fs\");\n\nvar TF_Parser = require('./TF_Parser');\n\nfunction RuleSet(filename) {\n  //this.rules = [];\n  this.rules = {};\n\n  if (filename) {\n    // Read transformation rules\n    try {\n      var data = fs.readFileSync(filename, 'utf8');\n      this.rules = TF_Parser.parse(data); // console.log(this.rules);\n      // console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + this.rules.length);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nRuleSet.prototype.addRule = function (rule) {\n  //this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nRuleSet.prototype.removeRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()];\n  }\n};\n\nRuleSet.prototype.getRules = function () {\n  var that = this;\n  return Object.keys(this.rules).map(function (key) {\n    return that.rules[key];\n  });\n};\n\nRuleSet.prototype.nrRules = function () {\n  return Object.keys(this.rules).length;\n};\n\nRuleSet.prototype.hasRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nRuleSet.prototype.prettyPrint = function () {\n  var result = \"\"; //this.rules.forEach(function(rule) {\n\n  var that = this;\n  Object.keys(this.rules).forEach(function (key) {\n    var rule = that.rules[key];\n    result += rule.prettyPrint() + \"\\n\";\n  });\n  return result;\n};\n\nmodule.exports = RuleSet;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/natural/lib/natural/brill_pos_tagger/lib/RuleSet.js"],"names":["fs","require","TF_Parser","RuleSet","filename","rules","data","readFileSync","parse","error","console","prototype","addRule","rule","key","removeRule","getRules","that","Object","keys","map","nrRules","length","hasRule","prettyPrint","result","forEach","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASE,OAAT,CAAiBC,QAAjB,EAA2B;AACzB;AACA,OAAKC,KAAL,GAAa,EAAb;;AAEA,MAAID,QAAJ,EAAc;AACZ;AACA,QAAI;AACF,UAAIE,IAAI,GAAGN,EAAE,CAACO,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAAX;AACA,WAAKC,KAAL,GAAaH,SAAS,CAACM,KAAV,CAAgBF,IAAhB,CAAb,CAFE,CAGF;AACA;AACD,KALD,CAMA,OAAOG,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;AACF;;AAEDN,OAAO,CAACQ,SAAR,CAAkBC,OAAlB,GAA4B,UAASC,IAAT,EAAe;AACzC;AACA,MAAI,CAAC,KAAKR,KAAL,CAAWQ,IAAI,CAACC,GAAL,EAAX,CAAL,EAA6B;AAC3B,SAAKT,KAAL,CAAWQ,IAAI,CAACC,GAAL,EAAX,IAAyBD,IAAzB;AACA,WAAO,IAAP;AACD,GAHD,MAIK;AACH,WAAO,KAAP;AACD;AACF,CATD;;AAWAV,OAAO,CAACQ,SAAR,CAAkBI,UAAlB,GAA+B,UAASF,IAAT,EAAe;AAC5C,MAAI,KAAKR,KAAL,CAAWQ,IAAI,CAACC,GAAL,EAAX,CAAJ,EAA4B;AAC1B,WAAO,KAAKT,KAAL,CAAWQ,IAAI,CAACC,GAAL,EAAX,CAAP;AACD;AACF,CAJD;;AAMAX,OAAO,CAACQ,SAAR,CAAkBK,QAAlB,GAA6B,YAAW;AACtC,MAAIC,IAAI,GAAG,IAAX;AACA,SAAOC,MAAM,CAACC,IAAP,CAAY,KAAKd,KAAjB,EAAwBe,GAAxB,CAA4B,UAASN,GAAT,EAAc;AAC/C,WAAOG,IAAI,CAACZ,KAAL,CAAWS,GAAX,CAAP;AACD,GAFM,CAAP;AAGD,CALD;;AAOAX,OAAO,CAACQ,SAAR,CAAkBU,OAAlB,GAA4B,YAAW;AACrC,SAAOH,MAAM,CAACC,IAAP,CAAY,KAAKd,KAAjB,EAAwBiB,MAA/B;AACD,CAFD;;AAIAnB,OAAO,CAACQ,SAAR,CAAkBY,OAAlB,GAA4B,UAASV,IAAT,EAAe;AACzC,MAAI,KAAKR,KAAL,CAAWQ,IAAI,CAACC,GAAL,EAAX,CAAJ,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAGK;AACH,WAAO,KAAP;AACD;AACF,CAPD;;AASAX,OAAO,CAACQ,SAAR,CAAkBa,WAAlB,GAAgC,YAAW;AACzC,MAAIC,MAAM,GAAG,EAAb,CADyC,CAEzC;;AACA,MAAIR,IAAI,GAAG,IAAX;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAY,KAAKd,KAAjB,EAAwBqB,OAAxB,CAAgC,UAASZ,GAAT,EAAc;AAC5C,QAAID,IAAI,GAAGI,IAAI,CAACZ,KAAL,CAAWS,GAAX,CAAX;AACAW,IAAAA,MAAM,IAAIZ,IAAI,CAACW,WAAL,KAAqB,IAA/B;AACD,GAHD;AAIA,SAAOC,MAAP;AACD,CATD;;AAWAE,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["/*\n   Set of transformation rules\n   Copyright (C) 2017 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar fs = require(\"fs\");\nvar TF_Parser = require('./TF_Parser');\n\nfunction RuleSet(filename) {\n  //this.rules = [];\n  this.rules = {};\n\n  if (filename) {\n    // Read transformation rules\n    try {\n      var data = fs.readFileSync(filename, 'utf8');\n      this.rules = TF_Parser.parse(data);\n      // console.log(this.rules);\n      // console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + this.rules.length);\n    }\n    catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nRuleSet.prototype.addRule = function(rule) {\n  //this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule;\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\nRuleSet.prototype.removeRule = function(rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()];\n  }\n};\n\nRuleSet.prototype.getRules = function() {\n  var that = this;\n  return Object.keys(this.rules).map(function(key) {\n    return that.rules[key];\n  });\n};\n\nRuleSet.prototype.nrRules = function() {\n  return Object.keys(this.rules).length;\n};\n\nRuleSet.prototype.hasRule = function(rule) {\n  if (this.rules[rule.key()]) {\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\nRuleSet.prototype.prettyPrint = function() {\n  var result = \"\";\n  //this.rules.forEach(function(rule) {\n  var that = this;\n  Object.keys(this.rules).forEach(function(key) {\n    var rule = that.rules[key];\n    result += rule.prettyPrint() + \"\\n\";\n  });\n  return result;\n};\n\nmodule.exports = RuleSet;\n"]},"metadata":{},"sourceType":"script"}