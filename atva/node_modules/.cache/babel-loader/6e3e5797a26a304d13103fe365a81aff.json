{"ast":null,"code":"class Vertex {\n  constructor(value) {\n    this.value = value;\n    this.adjacent = new Map();\n  }\n\n}\n\nclass WeightedGraph {\n  constructor() {\n    this.vertices_map = new Map();\n    this.size = 0;\n  }\n\n  addVertex(value) {\n    this.size += 1;\n    let vertex_to_add = new Vertex(value);\n    this.vertices_map.set(value, vertex_to_add);\n    return vertex_to_add;\n  }\n\n  getVertex(value) {\n    if (this.vertices_map.has(value)) {\n      return this.vertices_map.get(value);\n    }\n\n    return;\n  }\n\n  addEdge(a, b, weight) {\n    if (!this.vertices_map.has(a)) {\n      this.addVertex(a);\n    }\n\n    if (!this.vertices_map.has(b)) {\n      this.addVertex(b);\n    }\n\n    this.vertices_map.get(a).adjacent.set(b, weight);\n    this.vertices_map.get(b).adjacent.set(a, weight);\n  }\n\n  getAllVertices() {\n    let result_list = [];\n    this.vertices_map.forEach((value, key, map) => {\n      result_list.push(key);\n    });\n    return result_list;\n  }\n\n}\n\nmodule.exports.WeightedGraph = WeightedGraph;","map":{"version":3,"sources":["/Users/tenzy/Documents/work/vata-hackathon-fe/atva/node_modules/node-summarizer/src/WeightedGraph.js"],"names":["Vertex","constructor","value","adjacent","Map","WeightedGraph","vertices_map","size","addVertex","vertex_to_add","set","getVertex","has","get","addEdge","a","b","weight","getAllVertices","result_list","forEach","key","map","push","module","exports"],"mappings":"AAAA,MAAMA,MAAN,CAAY;AACXC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA;;AAJU;;AAOZ,MAAMC,aAAN,CAAmB;AAClBJ,EAAAA,WAAW,GAAE;AACZ,SAAKK,YAAL,GAAoB,IAAIF,GAAJ,EAApB;AACA,SAAKG,IAAL,GAAY,CAAZ;AACA;;AAEDC,EAAAA,SAAS,CAACN,KAAD,EAAO;AACf,SAAKK,IAAL,IAAW,CAAX;AACA,QAAIE,aAAa,GAAG,IAAIT,MAAJ,CAAWE,KAAX,CAApB;AACA,SAAKI,YAAL,CAAkBI,GAAlB,CAAsBR,KAAtB,EAA6BO,aAA7B;AACA,WAAOA,aAAP;AACA;;AAEDE,EAAAA,SAAS,CAACT,KAAD,EAAO;AACf,QAAI,KAAKI,YAAL,CAAkBM,GAAlB,CAAsBV,KAAtB,CAAJ,EAAiC;AAChC,aAAO,KAAKI,YAAL,CAAkBO,GAAlB,CAAsBX,KAAtB,CAAP;AACA;;AACD;AACA;;AAEDY,EAAAA,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAc;AACpB,QAAI,CAAC,KAAKX,YAAL,CAAkBM,GAAlB,CAAsBG,CAAtB,CAAL,EAA8B;AAC7B,WAAKP,SAAL,CAAeO,CAAf;AACA;;AACD,QAAI,CAAC,KAAKT,YAAL,CAAkBM,GAAlB,CAAsBI,CAAtB,CAAL,EAA8B;AAC7B,WAAKR,SAAL,CAAeQ,CAAf;AACA;;AACD,SAAKV,YAAL,CAAkBO,GAAlB,CAAsBE,CAAtB,EAAyBZ,QAAzB,CAAkCO,GAAlC,CAAsCM,CAAtC,EAAyCC,MAAzC;AACA,SAAKX,YAAL,CAAkBO,GAAlB,CAAsBG,CAAtB,EAAyBb,QAAzB,CAAkCO,GAAlC,CAAsCK,CAAtC,EAAyCE,MAAzC;AACA;;AAEDC,EAAAA,cAAc,GAAE;AACf,QAAIC,WAAW,GAAG,EAAlB;AACA,SAAKb,YAAL,CAAkBc,OAAlB,CAA0B,CAAClB,KAAD,EAAQmB,GAAR,EAAaC,GAAb,KAAmB;AAC5CH,MAAAA,WAAW,CAACI,IAAZ,CAAiBF,GAAjB;AACA,KAFD;AAGA,WAAOF,WAAP;AACA;;AArCiB;;AAwCnBK,MAAM,CAACC,OAAP,CAAepB,aAAf,GAA+BA,aAA/B","sourcesContent":["class Vertex{\n\tconstructor(value){\n\t\tthis.value = value;\n\t\tthis.adjacent = new Map();\n\t}\n}\n\nclass WeightedGraph{\n\tconstructor(){\n\t\tthis.vertices_map = new Map();\n\t\tthis.size = 0;\n\t}\n\n\taddVertex(value){\n\t\tthis.size+=1;\n\t\tlet vertex_to_add = new Vertex(value);\n\t\tthis.vertices_map.set(value, vertex_to_add);\n\t\treturn vertex_to_add;\n\t}\n\n\tgetVertex(value){\n\t\tif (this.vertices_map.has(value)){\n\t\t\treturn this.vertices_map.get(value);\n\t\t}\n\t\treturn \n\t}\n\n\taddEdge(a, b, weight){\n\t\tif (!this.vertices_map.has(a)){\n\t\t\tthis.addVertex(a);\n\t\t}\n\t\tif (!this.vertices_map.has(b)){\n\t\t\tthis.addVertex(b);\n\t\t}\n\t\tthis.vertices_map.get(a).adjacent.set(b, weight);\n\t\tthis.vertices_map.get(b).adjacent.set(a, weight);\n\t}\n\n\tgetAllVertices(){\n\t\tlet result_list = []\n\t\tthis.vertices_map.forEach((value, key, map)=>{\n\t\t\tresult_list.push(key);\n\t\t})\n\t\treturn result_list;\n\t}\n}\n\nmodule.exports.WeightedGraph = WeightedGraph;"]},"metadata":{},"sourceType":"script"}